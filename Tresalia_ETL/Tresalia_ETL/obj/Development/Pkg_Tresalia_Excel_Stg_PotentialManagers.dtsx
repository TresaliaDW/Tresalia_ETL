<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="3/18/2016 4:54:05 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DELPMAITR46622"
  DTS:CreatorName="SAPIENT\pmaitr"
  DTS:DTSID="{32F5E827-A6B0-44ED-BE8D-65182A90C64B}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="12.0.4100.1"
  DTS:LocaleID="1033"
  DTS:ObjectName="Pkg_Tresalia_Excel_Stg_PotentialManagers"
  DTS:PackageType="5"
  DTS:VersionBuild="273"
  DTS:VersionGUID="{AA539D5E-3497-4EC2-91DB-193E1E0BFC4D}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ConnectionManager_Stage]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{7F48876B-1298-4935-96D7-310A81F9CC2B}"
      DTS:ObjectName="ConnectionManager_Stage">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ConnectionMgr_Stage]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=TRES-DEV;Initial Catalog=Tresalia;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Excel Connection Manager]"
      DTS:CreationName="EXCEL"
      DTS:DelayValidation="True"
      DTS:DTSID="{D3D43A25-E268-42AE-B1C9-845217A02EDE}"
      DTS:ObjectName="Excel Connection Manager">
      <DTS:PropertyExpression
        DTS:Name="ExcelFilePath">@[User::SourceFolderPath] + @[User::SourceFileName_PotentialManagers]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source=D:\Tresalia\Anupam\Tresalia_ETL\Source\Monthly_Returns_Potential_SPAR_Upload.xlsx;Extended Properties=&quot;EXCEL 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Configurations>
    <DTS:Configuration
      DTS:ConfigurationString="D:\Tresalia\Anupam\Tresalia_ETL\Config\Tresalia_ConnectionStrings.dtsConfig"
      DTS:ConfigurationType="1"
      DTS:CreationName=""
      DTS:DTSID="{9F75349E-CA3C-4284-9A9E-597BA1F675D8}"
      DTS:ObjectName="Configuration 1" />
  </DTS:Configurations>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{EA6A0260-8DB6-48AD-8088-797F4C6F77F9}"
      DTS:ObjectName="ConnectionMgr_Stage">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Data Source=DELPMAITR46622;Integrated Security=True;Application Name=SSIS-TresaliaPackage2-{FB10F292-6740-4CD4-80EB-5167217BA1B1}DELPMAITR46622;</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D046C689-33A3-4B06-A551-277EB5AD1429}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">D:\Tresalia\Anupam\Tresalia_ETL\Archive\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{43DF6E67-C54B-4BE5-8572-9C8767A097DE}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="BatchDate_PotentialManagers">
      <DTS:VariableValue
        DTS:DataType="7">12:00:00 AM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1DC17E9E-F8FE-48E7-8489-484979ABA10E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnectionMgr_Stage">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=TRES-DEV;Initial Catalog=Tresalia;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7118DE2B-28EA-4740-9CB3-9D37FD134063}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">D:\Tresalia\Anupam\Tresalia_ETL\Error\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{36CEFB6E-2CB1-48C4-8A69-52B06996AA01}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileMask_PotentialManagers">
      <DTS:VariableValue
        DTS:DataType="8">Monthly_Returns_Potential_SPAR_Upload.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{14F5A59D-B366-44FC-9B88-C7394F49575B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="InputFolderPath_PotentialManagers">
      <DTS:VariableValue
        DTS:DataType="8">D:\Tresalia\Anupam\Tresalia_ETL\Input\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{854A78CB-7A08-4AFD-99AE-3C7269440710}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="ProcessedRecordsInFile">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EED60C62-F046-4BBB-8133-0D072B0C1F22}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ProcessingStatus">
      <DTS:VariableValue
        DTS:DataType="8">SUCCESS</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A1E5901C-04C4-43D2-B159-19F3E6CDE042}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;Select * from [&quot; +  @[User::TabName_PotentialManagers] +  @[User::SelectedColumnRange_PotentialManagers] + &quot;]&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Query_PotentialManagers">
      <DTS:VariableValue
        DTS:DataType="8">Select * from [Monthly$A:ID]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{87167E5F-5640-4AD9-A11B-4796F0D0CD81}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;Select * from [&quot; +  @[User::TabName_PotentialManagers_CodeIndex] +  @[User::SelectedColumnRange_PotentialManagers_CodeIndex] + &quot;]&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Query_PotentialManagers_CodeIndex">
      <DTS:VariableValue
        DTS:DataType="8">Select * from [Code index$A:C]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CB817DB9-5FEA-4C29-85CF-81CC1897464E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SelectedColumnRange_PotentialManagers">
      <DTS:VariableValue
        DTS:DataType="8">A:ID</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{424FC4B5-A364-46A4-90E7-F2A7D0E7C20F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SelectedColumnRange_PotentialManagers_CodeIndex">
      <DTS:VariableValue
        DTS:DataType="8">A:C</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9417F390-F4BA-4746-A5F0-E64FAD9EB648}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SelectedColumnRange_PotentialManagers_Quarterly">
      <DTS:VariableValue
        DTS:DataType="8">A:AT</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{18BABFBA-ACFD-4384-88B7-D8D0F1AEC312}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="SheetList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EE0A044D-2FA1-43CE-B88D-D25CB07E640C}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="SourceFileDateTime">
      <DTS:VariableValue
        DTS:DataType="7">12:00:00 AM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{84F681F3-DE25-4871-809E-1C2BAF48F144}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="SourceFileList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2B0AA5CF-9D3D-4B44-B993-F990CA6E6457}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceFileName_PotentialManagers">
      <DTS:VariableValue
        DTS:DataType="8">Monthly_Returns_Potential_SPAR_Upload.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F6A80E36-F929-47EE-A09C-7F86B5168AE1}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">D:\Tresalia\Anupam\Tresalia_ETL\Source\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FBAA5362-EF5E-42B9-BD3F-901B6387D806}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="StartDate">
      <DTS:VariableValue
        DTS:DataType="7">3/24/2016 12:06:23 AM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{11E3ADBD-9E08-44ED-9230-D37D4B55C40A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TabName_PotentialManagers">
      <DTS:VariableValue
        DTS:DataType="8">Monthly$</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{42D29987-71BE-498D-BB0B-6F8EE44D1778}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TabName_PotentialManagers_CodeIndex">
      <DTS:VariableValue
        DTS:DataType="8">Code index$</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{63D3DCB6-73C4-4D1E-957A-B34015BEE14B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TabName_PotentialManagers_Quarterly">
      <DTS:VariableValue
        DTS:DataType="8">Quarterly$</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5E034F3B-D0CA-40DA-9453-B66DB7C439A0}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="TotalRecordsInFile">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Clear Staging Table"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{AF4E9ABC-851E-4036-AB27-93C2CEDAE9E3}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Clear Staging Table"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{7F48876B-1298-4935-96D7-310A81F9CC2B}"
          SQLTask:SqlStatementSource="exec stg.spClearStageTable 'PotentialManagers'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Create TresaliaJobLog"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{E5D172E4-E695-49B3-B0D2-814212D7D3FA}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create TresaliaJobLog"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{7F48876B-1298-4935-96D7-310A81F9CC2B}"
          SQLTask:SqlStatementSource="exec stg.spLogPackageExecutionHistory ?,?,'PotentialManagersJobName','S'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="@PackageID"
            SQLTask:DtsVariableName="System::PackageID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="255" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="@PackageName"
            SQLTask:DtsVariableName="System::PackageName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="255" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{0527A181-332C-4654-BC69-B90EFA4A7C26}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachFromVarEnumerator"
        DTS:DTSID="{EF184E8D-76CC-42C3-BADD-6F023F5729A7}"
        DTS:ObjectName="{EF184E8D-76CC-42C3-BADD-6F023F5729A7}">
        <DTS:ObjectData>
          <FEEFVE
            VariableName="User::SourceFileList" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Archive"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{2267E344-F400-4C2D-B25F-CFD5AD6C133D}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Archive"
          DTS:ThreadHint="2">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_c23bdfef85b9444e9be5e79cec4e80a1"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::ArchiveFolderPath,User::SourceFileName_PotentialManagers,User::SourceFolderPath">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_c23bdfef85b9444e9be5e79cec4e80a1.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{75049836-0B0A-4BE1-ABA1-2B94536F3797}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_c23bdfef85b9444e9be5e79cec4e80a1</RootNamespace>
    <AssemblyName>ST_c23bdfef85b9444e9be5e79cec4e80a1</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.IO;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_c23bdfef85b9444e9be5e79cec4e80a1
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		public void Main()
		{
			// TODO: Add your code here
            string fileName = Dts.Variables["User::SourceFileName_PotentialManagers"].Value.ToString();
            string sourceFolderPath = Dts.Variables["User::SourceFolderPath"].Value.ToString();
            string archiveFolderPath = Dts.Variables["User::ArchiveFolderPath"].Value.ToString();
            this.ArchiveProcessedFile(fileName, sourceFolderPath, archiveFolderPath);

			Dts.TaskResult = (int)ScriptResults.Success;
		}

        
        public void ArchiveProcessedFile(string fileName, string sourceFolderPath, string archiveFolderPath)
        {
            string filePath = sourceFolderPath + "\\" + fileName;
            FileInfo fileInfo = new FileInfo(filePath);            

            if (fileInfo.Exists)
            {
                string archivedFileFullName = archiveFolderPath + "\\" + Path.GetFileNameWithoutExtension(fileInfo.FullName) + fileInfo.Extension;
                FileInfo archiveFileInfo = new FileInfo(archivedFileFullName);

                if (archiveFileInfo.Exists)
                {
                    //If File already exist in Archive then overwrite the file in archive and delete from Source
                    File.Copy(fileInfo.FullName, archivedFileFullName, true);
                    File.Delete(fileInfo.FullName);
                }
                else
                {
                    //If File Doesn't exist in Archive then move the file in archive from Source
                    File.Move(fileInfo.FullName, archivedFileFullName);
                }
                               
            }
        }     


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_c23bdfef85b9444e9be5e79cec4e80a1</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_c23bdfef85b9444e9be5e79cec4e80a1</msb:DisplayName>
		<msb:ProjectId>{637C6E78-D245-47E5-91E6-0D9A053D9D37}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_c23bdfef85b9444e9be5e79cec4e80a1.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c23bdfef85b9444e9be5e79cec4e80a1.Properties.Settings.get_Default():ST_c23bdfef85b9444e9be5e79cec4e80a1.Properties.Sett" +
    "ings")]

namespace ST_c23bdfef85b9444e9be5e79cec4e80a1.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_c23bdfef85b9444e9be5e79cec4e80a1")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_c23bdfef85b9444e9be5e79cec4e80a1")]
[assembly: AssemblyCopyright("Copyright @  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c23bdfef85b9444e9be5e79cec4e80a1.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c23bdfef85b9444e9be5e79cec4e80a1.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c23bdfef85b9444e9be5e79cec4e80a1.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_c23bdfef85b9444e9be5e79cec4e80a1.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_c23bdfef85b9444e9be5e79cec4e80a1.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_c23bdfef85b9444e9be5e79cec4e80a1.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAKf//FYAAAAAAAAAAOAAAiELAQsAABIAAAAGAAAAAAAAzjAA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAHQwAABXAAAAAEAAAAAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA1BAAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAAEAAAAQAAAAAQAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACw
MAAAAAAAAEgAAAACAAUAgCIAAPQNAAABAAAAAAAAAMghAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABMwBAB2AAAAAgAAEQIoFgAACm8XAAAKcnMAAHBvGAAACm8ZAAAKbxoA
AAoKAigWAAAKbxcAAApywQAAcG8YAAAKbxkAAApvGgAACgsCKBYAAApvFwAACnLvAABwbxgAAApv
GQAACm8aAAAKDAIGBwgoCQAABgIoFgAAChZvGwAACioAABMwBABuAAAAAwAAEQRyHwEAcAMoHAAA
CgoGcx0AAAoLB28eAAAKLFEFch8BAHAHbx8AAAooIAAACgdvIQAACigiAAAKDAhzHQAACg0Jbx4A
AAosGQdvHwAACggXKCMAAAoHbx8AAAooJAAACioHbx8AAAoIKCUAAAoqHgIoJgAACioAAAAAAAC0
AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGli
LCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVj
NTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAA
AFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAPAQAACN+AACo
BAAAfAYAACNTdHJpbmdzAAAAACQLAAAkAQAAI1VTAEgMAAAQAAAAI0dVSUQAAABYDAAAnAEAACNC
bG9iAAAAAAAAAAIAAAFXHaIBCQMAAAD6JTMAFgAAAQAAACIAAAAFAAAABgAAAAoAAAAEAAAAJgAA
AAIAAAAPAAAAAwAAAAIAAAADAAAABAAAAAEAAAAEAAAAAQAAAAEAAAAAAAoAAQAAAAAABgDBALoA
CgDdAMgADgA9ARQBBgBZAboABgBvAV4BBgCgAYsBBgCYAn4CBgDDArECBgDaArECBgD3ArECBgAW
A7ECBgAvA7ECBgBIA7ECBgBjA7ECBgB+A7ECBgCXA7ECBgDQA7ADBgDwA7ADBgAhBA4EBgA+BLoA
BgBDBLoABgBnBLECCgCTBH0ECgCsBH0EBgDBBLADDgDjBBQBDgAFBRQBEgBeBT4FEgB2BT4FBgCq
BboABgDCBbgFBgDLBbgFBgDyBbgFBgAhBrgFAAAAAAEAAAAAAAEAAQAAABAAMgA8AAUAAQABAAAB
EABrADwACQADAAUAAQAQAHQAfwANAAQACAADAQAAowAAABEABAALABEAfwETABEArAEXABEA9gE5
AAYGNAJOAFaAPAJRAFaARAJRAFAgAAAAAIMYvAEbAAEAWCAAAAAAkwjCAR8AAQCRIAAAAACTCNYB
JAABAJggAAAAAJMI4gEpAAEAoCAAAAAAlggGAj0AAgCzIAAAAACGGLwBGwACAKcgAAAAAJEY3ASQ
AAIAvCAAAAAAhgAaAhsAAgBAIQAAAACGAB8CRwACALohAAAAAIYYvAEbAAUAAAABAEwCAAABAFIC
AAACAFsCAAADAGwCOQC8AV8AQQC8AV8ASQC8AV8AUQC8AV8AWQC8AV8AYQC8AV8AaQC8AV8AcQC8
AV8AeQC8AV8AgQC8AV8AiQC8AWQAkQC8ARsAmQC8ARsACQC8ARsAoQBVBGkAoQBwBHAAKQC8AXUA
uQC8AYEAyQC8ARsAEQC8ARsA0QC8ARsAGQAXBZQA2QBoBZkA4QB/BZ4A6QCIBaQACQCSBagA2QCb
BWQA8QCxBbIA+QC8AV8AAQHaBbkAAQHlBagACQH3Bb0AAQETBqgA8QCxBcIAEQEmBsoAEQErBtEA
EQEyBtYAGQC8ARsACAAUAFUACAAYAFoAKQCTAIcALgAbAFYBLgAjAFYBLgBjAHwBLgALAOUALgAT
AC0BLgAzAC0BLgArAFYBLgA7AFwBLgBDAFYBLgBbAHMBQwBrAFoASQCTAIcAYQCbAFoAgwCrAFoA
fACsANwAAgABAAMAAwAAAG8BLwAAAO4BNAAAABICQgACAAIAAwACAAMABQABAAQABQACAAUABwAE
gAAAAQAAAC4XUxMAAAAAAAB/AAAABAAAAAAAAAAAAAAAAQCxAAAAAAAEAAAAAAAAAAAAAAABALoA
AAAAAAwAAAAAAAAAAAAAAAoA9QAAAAAADAAAAAAAAAAAAAAACgAfBQAAAAAAAAAAAQAAADcGAAAF
AAQAAAAAAAA8TW9kdWxlPgBTVF9jMjNiZGZlZjg1Yjk0NDRlOWJlNWU3OWNlYzRlODBhMS5kbGwA
UmVzb3VyY2VzAFNUX2MyM2JkZmVmODViOTQ0NGU5YmU1ZTc5Y2VjNGU4MGExLlByb3BlcnRpZXMA
U2V0dGluZ3MAU2NyaXB0TWFpbgBTVF9jMjNiZGZlZjg1Yjk0NDRlOWJlNWU3OWNlYzRlODBhMQBT
Y3JpcHRSZXN1bHRzAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24A
QXBwbGljYXRpb25TZXR0aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0
TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VN
YW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9y
AGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZh
dWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVsdABNYWluAEFyY2hpdmVQcm9jZXNzZWRGaWxl
AHZhbHVlX18AU3VjY2VzcwBGYWlsdXJlAHZhbHVlAGZpbGVOYW1lAHNvdXJjZUZvbGRlclBhdGgA
YXJjaGl2ZUZvbGRlclBhdGgAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUYXJnZXRGcmFtZXdv
cmtBdHRyaWJ1dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3Nl
bWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBB
c3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5
Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3Vs
dHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29t
cGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21w
YXRpYmlsaXR5QXR0cmlidXRlAFN5c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2Rl
QXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQXNzZW1i
bHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRy
aWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNj
dG9yAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBTY3JpcHRPYmplY3RNb2RlbABn
ZXRfRHRzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVy
LkR0cy5SdW50aW1lAFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAGdl
dF9WYWx1ZQBUb1N0cmluZwBzZXRfVGFza1Jlc3VsdABTdHJpbmcAQ29uY2F0AFN5c3RlbS5JTwBG
aWxlSW5mbwBGaWxlU3lzdGVtSW5mbwBnZXRfRXhpc3RzAGdldF9GdWxsTmFtZQBQYXRoAEdldEZp
bGVOYW1lV2l0aG91dEV4dGVuc2lvbgBnZXRfRXh0ZW5zaW9uAEZpbGUAQ29weQBEZWxldGUATW92
ZQBTVF9jMjNiZGZlZjg1Yjk0NDRlOWJlNWU3OWNlYzRlODBhMS5Qcm9wZXJ0aWVzLlJlc291cmNl
cy5yZXNvdXJjZXMAAAAAcVMAVABfAGMAMgAzAGIAZABmAGUAZgA4ADUAYgA5ADQANAA0AGUAOQBi
AGUANQBlADcAOQBjAGUAYwA0AGUAOAAwAGEAMQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUA
cwBvAHUAcgBjAGUAcwAATVUAcwBlAHIAOgA6AFMAbwB1AHIAYwBlAEYAaQBsAGUATgBhAG0AZQBf
AFAAbwB0AGUAbgB0AGkAYQBsAE0AYQBuAGEAZwBlAHIAcwAALVUAcwBlAHIAOgA6AFMAbwB1AHIA
YwBlAEYAbwBsAGQAZQByAFAAYQB0AGgAAC9VAHMAZQByADoAOgBBAHIAYwBoAGkAdgBlAEYAbwBs
AGQAZQByAFAAYQB0AGgAAANcAAAAJKQ9w94hmkKQGwggnRQ/TgAIt3pcVhk04IkIiYRdzYCAzJED
BhIVAwYSGQMgAAEEAAASFQQAABIZBQABARIZBAgAEhUECAASGQMGEgwEAAASDAQIABIMBiADAQ4O
DgIGCAMGERQEAAAAAAQBAAAABCABAQ4EIAEBCAYAARJREVUEIAASWQYgAgEOElkEBwESFQUgAQER
YQgBAAIAAAAAAAMAAAEEIAASbQQgABJxBSABEnUcAyAAHAMgAA4FBwMODg4GAAMODg4OAyAAAgQA
AQ4OBwAEDg4ODg4GAAMBDg4CBAABAQ4FAAIBDg4IBwQOEn0OEn1HAQAaLk5FVEZyYW1ld29yayxW
ZXJzaW9uPXY0LjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQoAQAj
U1RfYzIzYmRmZWY4NWI5NDQ0ZTliZTVlNzljZWM0ZTgwYTEAAAUBAAAAABYBABFDb3B5cmlnaHQg
QCAgMjAxNgAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQCcMAAAAAAA
AAAAAAC+MAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsDAAAAAAAAAAAAAAAAAAAAAAAAAAAF9D
b3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAApAMAAAAAAAAAAAAApAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAFMTLhcAAAEAUxMuFz8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBAQDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOACAAABADAAMAAw
ADAAMAA0AGIAMAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwBjADIAMwBiAGQAZgBlAGYAOAA1AGIAOQA0ADQANABlADkAYgBlADUAZQA3ADkAYwBlAGMANABl
ADgAMABhADEAAAA8AA4AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANQA5ADMA
NAAuADQAOQA0ADcAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfAGMAMgAz
AGIAZABmAGUAZgA4ADUAYgA5ADQANAA0AGUAOQBiAGUANQBlADcAOQBjAGUAYwA0AGUAOAAwAGEA
MQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQBy
AGkAZwBoAHQAIABAACAAIAAyADAAMQA2AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUA
bgBhAG0AZQAAAFMAVABfAGMAMgAzAGIAZABmAGUAZgA4ADUAYgA5ADQANAA0AGUAOQBiAGUANQBl
ADcAOQBjAGUAYwA0AGUAOAAwAGEAMQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEA
bQBlAAAAAABTAFQAXwBjADIAMwBiAGQAZgBlAGYAOAA1AGIAOQA0ADQANABlADkAYgBlADUAZQA3
ADkAYwBlAGMANABlADgAMABhADEAAABAAA4AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADUAOQAzADQALgA0ADkANAA3AAAARAAOAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBl
AHIAcwBpAG8AbgAAADEALgAwAC4ANQA5ADMANAAuADQAOQA0ADcAAAAAAAAAADAAAAwAAADQMAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Create FileHistory"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{53091460-BB36-4586-8F0C-D7CB773D796E}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Create FileHistory"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{7F48876B-1298-4935-96D7-310A81F9CC2B}"
              SQLTask:SqlStatementSource="exec stg.spCreateFileHistory ?,?,?,?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@SourceFilePath"
                SQLTask:DtsVariableName="User::SourceFolderPath"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@SourceFileName"
                SQLTask:DtsVariableName="User::SourceFileName_PotentialManagers"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@TabName"
                SQLTask:DtsVariableName="User::TabName_PotentialManagers"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@TotalRecordsInFile"
                SQLTask:DtsVariableName="User::TotalRecordsInFile"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Create FileHistory Quarterly"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{A6B7196B-D52B-44A1-91CE-913B6E1411AC}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Create FileHistory Quarterly"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{7F48876B-1298-4935-96D7-310A81F9CC2B}"
              SQLTask:SqlStatementSource="exec stg.spCreateFileHistory ?,?,?,?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@SourceFilePath"
                SQLTask:DtsVariableName="User::SourceFolderPath"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@SourceFileName"
                SQLTask:DtsVariableName="User::SourceFileName_PotentialManagers"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@TabName"
                SQLTask:DtsVariableName="User::TabName_PotentialManagers_Quarterly"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@TotalRecordsInFile"
                SQLTask:DtsVariableName="User::TotalRecordsInFile"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Create FillHistory"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{f4dd3883-2705-448f-aa19-34668afd467a}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Create FillHistory"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{7F48876B-1298-4935-96D7-310A81F9CC2B}"
              SQLTask:SqlStatementSource="exec stg.spCreateFileHistory ?,?,?,?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@SourceFilePath"
                SQLTask:DtsVariableName="User::SourceFolderPath"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@SourceFileName"
                SQLTask:DtsVariableName="User::SourceFileName_PotentialManagers"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@TabName"
                SQLTask:DtsVariableName="User::TabName_PotentialManagers_CodeIndex"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@TotalRecordsInFile"
                SQLTask:DtsVariableName="User::TotalRecordsInFile"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:DelayValidation="True"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{3b41f1e6-1442-4cf3-838c-f730d45dda2f}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Loading Excel Sheet Data To Table"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{4c2daba0-d80b-4b70-a2df-1c19a3f0be3b}"
              DTS:EventID="0"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{e356b47c-87ca-484f-99ee-27b49963044c}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables />
            </DTS:EventHandler>
          </DTS:EventHandlers>
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion"
                  componentClassID="Microsoft.DataConvert"
                  contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Data Conversion"
                  name="Data Conversion"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Inputs[Data Conversion Input]"
                      name="Data Conversion Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Inputs[Data Conversion Input].Columns[Code]"
                          cachedDataType="r8"
                          cachedName="Code"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].Columns[Code]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Inputs[Data Conversion Input].Columns[Name]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Name"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].Columns[Name]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Inputs[Data Conversion Input].Columns[Source]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Source"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].Columns[Source]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Output]"
                      exclusionGroup="1"
                      name="Data Conversion Output"
                      synchronousInputId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Inputs[Data Conversion Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Output].Columns[DC.Code]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          length="100"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Output].Columns[DC.Code]"
                          name="DC.Code"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the input column used as the source of data for the conversion."
                              name="SourceInputColumnLineageID">#{Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].Columns[Code]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Output].Columns[DC.Name]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          length="100"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Output].Columns[DC.Name]"
                          name="DC.Name"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the input column used as the source of data for the conversion."
                              name="SourceInputColumnLineageID">#{Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].Columns[Name]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Output].Columns[DC.Source]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          length="100"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Output].Columns[DC.Source]"
                          name="DC.Source"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the input column used as the source of data for the conversion."
                              name="SourceInputColumnLineageID">#{Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].Columns[Source]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Data Conversion Error Output"
                      synchronousInputId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Inputs[Data Conversion Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Column"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output].Columns[FileName]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="100"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output].Columns[FileName]"
                          name="FileName"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_STR,100,1252)@[User::SourceFileName_PotentialManagers]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_STR,100,1252)@[User::SourceFileName_PotentialManagers]</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output].Columns[Filepath]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="100"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output].Columns[Filepath]"
                          name="Filepath"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_STR,100,1252)@[User::SourceFolderPath]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_STR,100,1252)@[User::SourceFolderPath]</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output].Columns[TabName]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="100"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output].Columns[TabName]"
                          name="TabName"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_STR,100,1252)@[User::TabName_PotentialManagers_CodeIndex]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_STR,100,1252)@[User::TabName_PotentialManagers_CodeIndex]</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output].Columns[BatchDate]"
                          dataType="date"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output].Columns[BatchDate]"
                          name="BatchDate"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">@[User::BatchDate_PotentialManagers]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">@[User::BatchDate_PotentialManagers]</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source"
                  componentClassID="Microsoft.ExcelSource"
                  contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Excel Source"
                  name="Excel Source"
                  usesDispositions="true"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">Master$</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable">User::Query_PotentialManagers_CodeIndex</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.String"
                      description="The mapping from parameters in the SQL command to variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[Excel Connection Manager]"
                      connectionManagerRefId="Package.ConnectionManagers[Excel Connection Manager]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output]"
                      name="Excel Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].Columns[Code]"
                          dataType="r8"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].ExternalColumns[Code]"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].Columns[Code]"
                          name="Code"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].Columns[Name]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].ExternalColumns[Name]"
                          length="255"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].Columns[Name]"
                          name="Name"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].Columns[Source]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].ExternalColumns[Source]"
                          length="255"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].Columns[Source]"
                          name="Source"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].ExternalColumns[Code]"
                          dataType="r8"
                          name="Code" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].ExternalColumns[Name]"
                          dataType="wstr"
                          length="255"
                          name="Name" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output].ExternalColumns[Source]"
                          dataType="wstr"
                          length="255"
                          name="Source" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Error Output]"
                      isErrorOut="true"
                      name="Excel Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Error Output].Columns[Code]"
                          dataType="r8"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Error Output].Columns[Code]"
                          name="Code" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Error Output].Columns[Name]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Error Output].Columns[Name]"
                          name="Name" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Error Output].Columns[Source]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Error Output].Columns[Source]"
                          name="Source" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="OLE DB Destination"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[stg].[PotentialManagersCodeIndex]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[ConnectionManager_Stage]"
                      connectionManagerRefId="Package.ConnectionManagers[ConnectionManager_Stage]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[FileName]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="100"
                          cachedName="FileName"
                          externalMetadataColumnId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[FileName]"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output].Columns[FileName]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Filepath]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="100"
                          cachedName="Filepath"
                          externalMetadataColumnId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[FilePath]"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output].Columns[Filepath]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[TabName]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="100"
                          cachedName="TabName"
                          externalMetadataColumnId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[TabName]"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output].Columns[TabName]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[BatchDate]"
                          cachedDataType="date"
                          cachedName="BatchDate"
                          externalMetadataColumnId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[BatchDate]"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output].Columns[BatchDate]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[DC.Code]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="100"
                          cachedName="DC.Code"
                          externalMetadataColumnId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Code]"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Output].Columns[DC.Code]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[DC.Name]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="100"
                          cachedName="DC.Name"
                          externalMetadataColumnId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Name]"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Output].Columns[DC.Name]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[DC.Source]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="100"
                          cachedName="DC.Source"
                          externalMetadataColumnId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Source]"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Output].Columns[DC.Source]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[FileName]"
                          codePage="1252"
                          dataType="str"
                          length="100"
                          name="FileName" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[FilePath]"
                          codePage="1252"
                          dataType="str"
                          length="100"
                          name="FilePath" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[TabName]"
                          codePage="1252"
                          dataType="str"
                          length="100"
                          name="TabName" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[CreatedDate]"
                          dataType="dbTimeStamp"
                          name="CreatedDate" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[CreatedBy]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="CreatedBy" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[BatchDate]"
                          dataType="dbDate"
                          name="BatchDate" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Code]"
                          codePage="1252"
                          dataType="str"
                          length="100"
                          name="Code" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Name]"
                          codePage="1252"
                          dataType="str"
                          length="100"
                          name="Name" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Source]"
                          codePage="1252"
                          dataType="str"
                          length="100"
                          name="Source" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Row Count"
                  componentClassID="Microsoft.RowCount"
                  contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
                  name="Row Count">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the variable to hold the row count."
                      name="VariableName">User::TotalRecordsInFile</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Row Count.Inputs[Row Count Input 1]"
                      hasSideEffects="true"
                      name="Row Count Input 1">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Row Count.Outputs[Row Count Output 1]"
                      name="Row Count Output 1"
                      synchronousInputId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Row Count.Inputs[Row Count Input 1]">
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table.Paths[Data Conversion Output]"
                  endId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination.Inputs[OLE DB Destination Input]"
                  name="Data Conversion Output"
                  startId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Outputs[Data Conversion Output]" />
                <path
                  refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table.Paths[Derived Column Output]"
                  endId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion.Inputs[Data Conversion Input]"
                  name="Derived Column Output"
                  startId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table.Paths[Excel Source Output]"
                  endId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Row Count.Inputs[Row Count Input 1]"
                  name="Excel Source Output"
                  startId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source.Outputs[Excel Source Output]" />
                <path
                  refId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table.Paths[Row Count Output 1]"
                  endId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column.Inputs[Derived Column Input]"
                  name="Row Count Output 1"
                  startId="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Row Count.Outputs[Row Count Output 1]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Logging Error"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{A044182B-88E9-4A76-A15D-83B61C96724C}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Logging Error"
          DTS:ThreadHint="3">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_9383e720daf74dd4a05e799e71ae2f25"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::ErrorFolderPath,User::SourceFileName_PotentialManagers,User::SourceFolderPath">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_9383e720daf74dd4a05e799e71ae2f25")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_9383e720daf74dd4a05e799e71ae2f25")]
[assembly: AssemblyCopyright("Copyright @  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.IO;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_9383e720daf74dd4a05e799e71ae2f25
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        public void Main()
        {
            // TODO: Add your code here

            string fileName = Dts.Variables["User::SourceFileName_PotentialManagers"].Value.ToString();
            string sourceFolderPath = Dts.Variables["User::SourceFolderPath"].Value.ToString();
            string errorFolderPath = Dts.Variables["User::ErrorFolderPath"].Value.ToString();
            this.MoveErrorFile(fileName, sourceFolderPath, errorFolderPath);


            /*
            string lines = Environment.NewLine + "--------------------------------------------" + Environment.NewLine + "Error Code = " + Dts.Variables["System::ErrorCode"].Value.ToString() + Environment.NewLine + "Error Description = " + Dts.Variables["System::ErrorDescription"].ToString() + Environment.NewLine + "Date = " + DateTime.Now.ToString() + Environment.NewLine + "--------------------------------------------";
            string filepath = @"D:\Tersalia\Error\LogError.txt";
            File.AppendAllText(filepath, lines, System.Text.Encoding.ASCII);
            */

            Dts.TaskResult = (int)ScriptResults.Success;
        }

        public void MoveErrorFile(string fileName, string sourceFolderPath, string errorFolderPath)
        {
            string filePath = sourceFolderPath + "\\" + fileName;
            FileInfo fileInfo = new FileInfo(filePath);

            if (fileInfo.Exists)
            {
                string erroredFileFullName = errorFolderPath + "\\" + Path.GetFileNameWithoutExtension(fileInfo.FullName) + fileInfo.Extension;
                FileInfo errorFileInfo = new FileInfo(erroredFileFullName);

                if (errorFileInfo.Exists)
                {
                    //If File already exist in Error folder then overwrite the file in Error and delete from Source
                    File.Copy(fileInfo.FullName, erroredFileFullName, true);
                    File.Delete(fileInfo.FullName);
                }
                else
                {
                    //If File Doesn't exist in Error folder then move the file in error folder from Source
                    File.Move(fileInfo.FullName, erroredFileFullName);
                }

            }
        }


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9383e720daf74dd4a05e799e71ae2f25.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9383e720daf74dd4a05e799e71ae2f25.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9383e720daf74dd4a05e799e71ae2f25.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_9383e720daf74dd4a05e799e71ae2f25.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_9383e720daf74dd4a05e799e71ae2f25.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_9383e720daf74dd4a05e799e71ae2f25</msb:CodeName>
		<msb:DisplayName>ST_9383e720daf74dd4a05e799e71ae2f25</msb:DisplayName>
		<msb:ProjectId>{4DC290E8-A702-45EE-86FB-102BE8F1CCCC}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_9383e720daf74dd4a05e799e71ae2f25.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9383e720daf74dd4a05e799e71ae2f25.Properties.Settings.get_Default():ST_9383e720daf74dd4a05e799e71ae2f25.Properties.Sett" +
    "ings")]

namespace ST_9383e720daf74dd4a05e799e71ae2f25.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="ST_9383e720daf74dd4a05e799e71ae2f25.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{18A6668F-9905-4FF9-A8DA-6CEA3DEFAC94}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_9383e720daf74dd4a05e799e71ae2f25</RootNamespace>
    <AssemblyName>ST_9383e720daf74dd4a05e799e71ae2f25</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <BinaryItem
                Name="ST_9383e720daf74dd4a05e799e71ae2f25.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAM32/FYAAAAAAAAAAOAAAiELAQsAABIAAAAGAAAAAAAAvjAA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAGgwAABTAAAAAEAAAAAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAxBAAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAAEAAAAQAAAAAQAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACg
MAAAAAAAAEgAAAACAAUAgCIAAOgNAAABAAAAAAAAAMghAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABMwBAB2AAAAAgAAEQIoFgAACm8XAAAKcnMAAHBvGAAACm8ZAAAKbxoA
AAoKAigWAAAKbxcAAApywQAAcG8YAAAKbxkAAApvGgAACgsCKBYAAApvFwAACnLvAABwbxgAAApv
GQAACm8aAAAKDAIGBwgoCQAABgIoFgAAChZvGwAACioAABMwBABuAAAAAwAAEQRyGwEAcAMoHAAA
CgoGcx0AAAoLB28eAAAKLFEFchsBAHAHbx8AAAooIAAACgdvIQAACigiAAAKDAhzHQAACg0Jbx4A
AAosGQdvHwAACggXKCMAAAoHbx8AAAooJAAACioHbx8AAAoIKCUAAAoqHgIoJgAACioAAAAAAAC0
AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGli
LCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVj
NTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAA
AFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAPAQAACN+AACo
BAAAdAYAACNTdHJpbmdzAAAAABwLAAAgAQAAI1VTADwMAAAQAAAAI0dVSUQAAABMDAAAnAEAACNC
bG9iAAAAAAAAAAIAAAFXHaIBCQMAAAD6JTMAFgAAAQAAACIAAAAFAAAABgAAAAoAAAAEAAAAJgAA
AAIAAAAPAAAAAwAAAAIAAAADAAAABAAAAAEAAAAEAAAAAQAAAAEAAAAAAAoAAQAAAAAABgDBALoA
CgDdAMgADgA9ARQBBgBZAboABgBvAV4BBgCgAYsBBgCPAnUCBgC6AqgCBgDRAqgCBgDuAqgCBgAN
A6gCBgAmA6gCBgA/A6gCBgBaA6gCBgB1A6gCBgCOA6gCBgDHA6cDBgDnA6cDBgAYBAUEBgA1BLoA
BgA6BLoABgBeBKgCCgCKBHQECgCjBHQEBgC4BKcDDgDaBBQBDgD8BBQBEgBVBTUFEgBtBTUFBgCh
BboABgC5Ba8FBgDCBa8FBgDpBa8FBgAYBq8FAAAAAAEAAAAAAAEAAQAAABAAMgA8AAUAAQABAAAB
EABrADwACQADAAUAAQAQAHQAfwANAAQACAADAQAAowAAABEABAALABEAfwETABEArAEXABEA9gE5
AAYGLQJOAFaANQJRAFaAPQJRAFAgAAAAAIMYvAEbAAEAWCAAAAAAkwjCAR8AAQCRIAAAAACTCNYB
JAABAJggAAAAAJMI4gEpAAEAoCAAAAAAlggGAj0AAgCzIAAAAACGGLwBGwACAKcgAAAAAJEY0wSQ
AAIAvCAAAAAAhgAaAhsAAgBAIQAAAACGAB8CRwACALohAAAAAIYYvAEbAAUAAAABAEUCAAABAEsC
AAACAFQCAAADAGUCOQC8AV8AQQC8AV8ASQC8AV8AUQC8AV8AWQC8AV8AYQC8AV8AaQC8AV8AcQC8
AV8AeQC8AV8AgQC8AV8AiQC8AWQAkQC8ARsAmQC8ARsACQC8ARsAoQBMBGkAoQBnBHAAKQC8AXUA
uQC8AYEAyQC8ARsAEQC8ARsA0QC8ARsAGQAOBZQA2QBfBZkA4QB2BZ4A6QB/BaQACQCJBagA2QCS
BWQA8QCoBbIA+QC8AV8AAQHRBbkAAQHcBagACQHuBb0AAQEKBqgA8QCoBcIAEQEdBsoAEQEiBtEA
EQEpBtYAGQC8ARsACAAUAFUACAAYAFoAKQCTAIcALgAbAFYBLgAjAFYBLgBjAHwBLgALAOUALgAT
AC0BLgAzAC0BLgArAFYBLgA7AFwBLgBDAFYBLgBbAHMBQwBrAFoASQCTAIcAYQCbAFoAgwCrAFoA
fACsANwAAgABAAMAAwAAAG8BLwAAAO4BNAAAABICQgACAAIAAwACAAMABQABAAQABQACAAUABwAE
gAAAAQAAAC4X5g4AAAAAAAB/AAAABAAAAAAAAAAAAAAAAQCxAAAAAAAEAAAAAAAAAAAAAAABALoA
AAAAAAwAAAAAAAAAAAAAAAoA9QAAAAAADAAAAAAAAAAAAAAACgAWBQAAAAAAAAAAAQAAAC4GAAAF
AAQAAAAAAAA8TW9kdWxlPgBTVF85MzgzZTcyMGRhZjc0ZGQ0YTA1ZTc5OWU3MWFlMmYyNS5kbGwA
UmVzb3VyY2VzAFNUXzkzODNlNzIwZGFmNzRkZDRhMDVlNzk5ZTcxYWUyZjI1LlByb3BlcnRpZXMA
U2V0dGluZ3MAU2NyaXB0TWFpbgBTVF85MzgzZTcyMGRhZjc0ZGQ0YTA1ZTc5OWU3MWFlMmYyNQBT
Y3JpcHRSZXN1bHRzAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24A
QXBwbGljYXRpb25TZXR0aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0
TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VN
YW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9y
AGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZh
dWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVsdABNYWluAE1vdmVFcnJvckZpbGUAdmFsdWVf
XwBTdWNjZXNzAEZhaWx1cmUAdmFsdWUAZmlsZU5hbWUAc291cmNlRm9sZGVyUGF0aABlcnJvckZv
bGRlclBhdGgAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1
dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2Ny
aXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNv
bXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0
QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJp
YnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2
aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5
QXR0cmlidXRlAFN5c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRl
AFR5cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fz
c2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRp
dG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNT
Y3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50
aW1lAFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1ZQBU
b1N0cmluZwBzZXRfVGFza1Jlc3VsdABTdHJpbmcAQ29uY2F0AFN5c3RlbS5JTwBGaWxlSW5mbwBG
aWxlU3lzdGVtSW5mbwBnZXRfRXhpc3RzAGdldF9GdWxsTmFtZQBQYXRoAEdldEZpbGVOYW1lV2l0
aG91dEV4dGVuc2lvbgBnZXRfRXh0ZW5zaW9uAEZpbGUAQ29weQBEZWxldGUATW92ZQBTVF85Mzgz
ZTcyMGRhZjc0ZGQ0YTA1ZTc5OWU3MWFlMmYyNS5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJj
ZXMAAAAAAHFTAFQAXwA5ADMAOAAzAGUANwAyADAAZABhAGYANwA0AGQAZAA0AGEAMAA1AGUANwA5
ADkAZQA3ADEAYQBlADIAZgAyADUALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIA
YwBlAHMAAE1VAHMAZQByADoAOgBTAG8AdQByAGMAZQBGAGkAbABlAE4AYQBtAGUAXwBQAG8AdABl
AG4AdABpAGEAbABNAGEAbgBhAGcAZQByAHMAAC1VAHMAZQByADoAOgBTAG8AdQByAGMAZQBGAG8A
bABkAGUAcgBQAGEAdABoAAArVQBzAGUAcgA6ADoARQByAHIAbwByAEYAbwBsAGQAZQByAFAAYQB0
AGgAAANcAAAA81U0vAMxrE6sDJ5BdnPjOAAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEE
AAASFQQAABIZBQABARIZBAgAEhUECAASGQMGEgwEAAASDAQIABIMBiADAQ4ODgIGCAMGERQEAAAA
AAQBAAAABCABAQ4EIAEBCAYAARJREVUEIAASWQYgAgEOElkEBwESFQUgAQERYQgBAAIAAAAAAAMA
AAEEIAASbQQgABJxBSABEnUcAyAAHAMgAA4FBwMODg4GAAMODg4OAyAAAgQAAQ4OBwAEDg4ODg4G
AAMBDg4CBAABAQ4FAAIBDg4IBwQOEn0OEn1HAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjAB
AFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQoAQAjU1RfOTM4M2U3MjBk
YWY3NGRkNGEwNWU3OTllNzFhZTJmMjUAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxNgAACAEA
CAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQCQMAAAAAAAAAAAAACuMAAAACAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAoDAAAAAAAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3Jl
ZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAApAMAAAAAAAAAAAAApAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAOYOLhcAAAEA5g4uFz8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBAQDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOACAAABADAAMAAw
ADAAMAA0AGIAMAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwA5ADMAOAAzAGUANwAyADAAZABhAGYANwA0AGQAZAA0AGEAMAA1AGUANwA5ADkAZQA3ADEAYQBl
ADIAZgAyADUAAAA8AA4AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANQA5ADMA
NAAuADMAOAAxADQAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADkAMwA4
ADMAZQA3ADIAMABkAGEAZgA3ADQAZABkADQAYQAwADUAZQA3ADkAOQBlADcAMQBhAGUAMgBmADIA
NQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQBy
AGkAZwBoAHQAIABAACAAIAAyADAAMQA2AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUA
bgBhAG0AZQAAAFMAVABfADkAMwA4ADMAZQA3ADIAMABkAGEAZgA3ADQAZABkADQAYQAwADUAZQA3
ADkAOQBlADcAMQBhAGUAMgBmADIANQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEA
bQBlAAAAAABTAFQAXwA5ADMAOAAzAGUANwAyADAAZABhAGYANwA0AGQAZAA0AGEAMAA1AGUANwA5
ADkAZQA3ADEAYQBlADIAZgAyADUAAABAAA4AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADUAOQAzADQALgAzADgAMQA0AAAARAAOAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBl
AHIAcwBpAG8AbgAAADEALgAwAC4ANQA5ADMANAAuADMAOAAxADQAAAAAAAAAADAAAAwAAADAMAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Logging Error Codeindex"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:Disabled="True"
          DTS:DTSID="{2c647f03-660d-423a-9d22-ae2b4a1c348d}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Logging Error Codeindex"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_b6853de8a52d486daf62e2d9b127d7a2"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Logging Error Quartely"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{C5429508-B1A9-4640-BD91-ED04A43A53A9}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Logging Error Quartely"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_20e35eb527c14d53beae2b7a8df88953"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::ErrorFolderPath,User::SourceFileName_PotentialManagers,User::SourceFolderPath">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_20e35eb527c14d53beae2b7a8df88953")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_20e35eb527c14d53beae2b7a8df88953")]
[assembly: AssemblyCopyright("Copyright @  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_20e35eb527c14d53beae2b7a8df88953.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{7B7C269A-05B8-4B33-8D72-C1031A134A28}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_20e35eb527c14d53beae2b7a8df88953</RootNamespace>
    <AssemblyName>ST_20e35eb527c14d53beae2b7a8df88953</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.IO;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_20e35eb527c14d53beae2b7a8df88953
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        public void Main()
        {
            // TODO: Add your code here

            string fileName = Dts.Variables["User::SourceFileName_PotentialManagers"].Value.ToString();
            string sourceFolderPath = Dts.Variables["User::SourceFolderPath"].Value.ToString();
            string errorFolderPath = Dts.Variables["User::ErrorFolderPath"].Value.ToString();
            this.MoveErrorFile(fileName, sourceFolderPath, errorFolderPath);


            /*
            string lines = Environment.NewLine + "--------------------------------------------" + Environment.NewLine + "Error Code = " + Dts.Variables["System::ErrorCode"].Value.ToString() + Environment.NewLine + "Error Description = " + Dts.Variables["System::ErrorDescription"].ToString() + Environment.NewLine + "Date = " + DateTime.Now.ToString() + Environment.NewLine + "--------------------------------------------";
            string filepath = @"D:\Tersalia\Error\LogError.txt";
            File.AppendAllText(filepath, lines, System.Text.Encoding.ASCII);
            */

            Dts.TaskResult = (int)ScriptResults.Success;
        }

        public void MoveErrorFile(string fileName, string sourceFolderPath, string errorFolderPath)
        {
            string filePath = sourceFolderPath + "\\" + fileName;
            FileInfo fileInfo = new FileInfo(filePath);

            if (fileInfo.Exists)
            {
                string erroredFileFullName = errorFolderPath + "\\" + Path.GetFileNameWithoutExtension(fileInfo.FullName) + fileInfo.Extension;
                FileInfo errorFileInfo = new FileInfo(erroredFileFullName);

                if (errorFileInfo.Exists)
                {
                    //If File already exist in Error folder then overwrite the file in Error and delete from Source
                    File.Copy(fileInfo.FullName, erroredFileFullName, true);
                    File.Delete(fileInfo.FullName);
                }
                else
                {
                    //If File Doesn't exist in Error folder then move the file in error folder from Source
                    File.Move(fileInfo.FullName, erroredFileFullName);
                }

            }
        }


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_20e35eb527c14d53beae2b7a8df88953</msb:CodeName>
		<msb:DisplayName>ST_20e35eb527c14d53beae2b7a8df88953</msb:DisplayName>
		<msb:ProjectId>{74A62AB8-029B-484B-9352-AFF4A2C4E802}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_20e35eb527c14d53beae2b7a8df88953.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_20e35eb527c14d53beae2b7a8df88953.Properties.Settings.get_Default():ST_20e35eb527c14d53beae2b7a8df88953.Properties.Sett" +
    "ings")]

namespace ST_20e35eb527c14d53beae2b7a8df88953.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_20e35eb527c14d53beae2b7a8df88953.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_20e35eb527c14d53beae2b7a8df88953.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_20e35eb527c14d53beae2b7a8df88953.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_20e35eb527c14d53beae2b7a8df88953.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_20e35eb527c14d53beae2b7a8df88953.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_20e35eb527c14d53beae2b7a8df88953.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDADf3/FYAAAAAAAAAAOAAAiELAQsAABIAAAAGAAAAAAAAvjAA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAGgwAABTAAAAAEAAAAAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAxBAAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAAEAAAAQAAAAAQAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACg
MAAAAAAAAEgAAAACAAUAgCIAAOgNAAABAAAAAAAAAMghAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABMwBAB2AAAAAgAAEQIoFgAACm8XAAAKcnMAAHBvGAAACm8ZAAAKbxoA
AAoKAigWAAAKbxcAAApywQAAcG8YAAAKbxkAAApvGgAACgsCKBYAAApvFwAACnLvAABwbxgAAApv
GQAACm8aAAAKDAIGBwgoCQAABgIoFgAAChZvGwAACioAABMwBABuAAAAAwAAEQRyGwEAcAMoHAAA
CgoGcx0AAAoLB28eAAAKLFEFchsBAHAHbx8AAAooIAAACgdvIQAACigiAAAKDAhzHQAACg0Jbx4A
AAosGQdvHwAACggXKCMAAAoHbx8AAAooJAAACioHbx8AAAoIKCUAAAoqHgIoJgAACioAAAAAAAC0
AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGli
LCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVj
NTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAA
AFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAPAQAACN+AACo
BAAAdAYAACNTdHJpbmdzAAAAABwLAAAgAQAAI1VTADwMAAAQAAAAI0dVSUQAAABMDAAAnAEAACNC
bG9iAAAAAAAAAAIAAAFXHaIBCQMAAAD6JTMAFgAAAQAAACIAAAAFAAAABgAAAAoAAAAEAAAAJgAA
AAIAAAAPAAAAAwAAAAIAAAADAAAABAAAAAEAAAAEAAAAAQAAAAEAAAAAAAoAAQAAAAAABgDBALoA
CgDdAMgADgA9ARQBBgBZAboABgBvAV4BBgCgAYsBBgCPAnUCBgC6AqgCBgDRAqgCBgDuAqgCBgAN
A6gCBgAmA6gCBgA/A6gCBgBaA6gCBgB1A6gCBgCOA6gCBgDHA6cDBgDnA6cDBgAYBAUEBgA1BLoA
BgA6BLoABgBeBKgCCgCKBHQECgCjBHQEBgC4BKcDDgDaBBQBDgD8BBQBEgBVBTUFEgBtBTUFBgCh
BboABgC5Ba8FBgDCBa8FBgDpBa8FBgAYBq8FAAAAAAEAAAAAAAEAAQAAABAAMgA8AAUAAQABAAAB
EABrADwACQADAAUAAQAQAHQAfwANAAQACAADAQAAowAAABEABAALABEAfwETABEArAEXABEA9gE5
AAYGLQJOAFaANQJRAFaAPQJRAFAgAAAAAIMYvAEbAAEAWCAAAAAAkwjCAR8AAQCRIAAAAACTCNYB
JAABAJggAAAAAJMI4gEpAAEAoCAAAAAAlggGAj0AAgCzIAAAAACGGLwBGwACAKcgAAAAAJEY0wSQ
AAIAvCAAAAAAhgAaAhsAAgBAIQAAAACGAB8CRwACALohAAAAAIYYvAEbAAUAAAABAEUCAAABAEsC
AAACAFQCAAADAGUCOQC8AV8AQQC8AV8ASQC8AV8AUQC8AV8AWQC8AV8AYQC8AV8AaQC8AV8AcQC8
AV8AeQC8AV8AgQC8AV8AiQC8AWQAkQC8ARsAmQC8ARsACQC8ARsAoQBMBGkAoQBnBHAAKQC8AXUA
uQC8AYEAyQC8ARsAEQC8ARsA0QC8ARsAGQAOBZQA2QBfBZkA4QB2BZ4A6QB/BaQACQCJBagA2QCS
BWQA8QCoBbIA+QC8AV8AAQHRBbkAAQHcBagACQHuBb0AAQEKBqgA8QCoBcIAEQEdBsoAEQEiBtEA
EQEpBtYAGQC8ARsACAAUAFUACAAYAFoAKQCTAIcALgAbAFYBLgAjAFYBLgBjAHwBLgALAOUALgAT
AC0BLgAzAC0BLgArAFYBLgA7AFwBLgBDAFYBLgBbAHMBQwBrAFoASQCTAIcAYQCbAFoAgwCrAFoA
fACsANwAAgABAAMAAwAAAG8BLwAAAO4BNAAAABICQgACAAIAAwACAAMABQABAAQABQACAAUABwAE
gAAAAQAAAC4XGw8AAAAAAAB/AAAABAAAAAAAAAAAAAAAAQCxAAAAAAAEAAAAAAAAAAAAAAABALoA
AAAAAAwAAAAAAAAAAAAAAAoA9QAAAAAADAAAAAAAAAAAAAAACgAWBQAAAAAAAAAAAQAAAC4GAAAF
AAQAAAAAAAA8TW9kdWxlPgBTVF8yMGUzNWViNTI3YzE0ZDUzYmVhZTJiN2E4ZGY4ODk1My5kbGwA
UmVzb3VyY2VzAFNUXzIwZTM1ZWI1MjdjMTRkNTNiZWFlMmI3YThkZjg4OTUzLlByb3BlcnRpZXMA
U2V0dGluZ3MAU2NyaXB0TWFpbgBTVF8yMGUzNWViNTI3YzE0ZDUzYmVhZTJiN2E4ZGY4ODk1MwBT
Y3JpcHRSZXN1bHRzAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24A
QXBwbGljYXRpb25TZXR0aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0
TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VN
YW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9y
AGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZh
dWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVsdABNYWluAE1vdmVFcnJvckZpbGUAdmFsdWVf
XwBTdWNjZXNzAEZhaWx1cmUAdmFsdWUAZmlsZU5hbWUAc291cmNlRm9sZGVyUGF0aABlcnJvckZv
bGRlclBhdGgAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1
dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2Ny
aXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNv
bXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0
QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJp
YnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2
aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5
QXR0cmlidXRlAFN5c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRl
AFR5cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fz
c2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRp
dG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNT
Y3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50
aW1lAFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1ZQBU
b1N0cmluZwBzZXRfVGFza1Jlc3VsdABTdHJpbmcAQ29uY2F0AFN5c3RlbS5JTwBGaWxlSW5mbwBG
aWxlU3lzdGVtSW5mbwBnZXRfRXhpc3RzAGdldF9GdWxsTmFtZQBQYXRoAEdldEZpbGVOYW1lV2l0
aG91dEV4dGVuc2lvbgBnZXRfRXh0ZW5zaW9uAEZpbGUAQ29weQBEZWxldGUATW92ZQBTVF8yMGUz
NWViNTI3YzE0ZDUzYmVhZTJiN2E4ZGY4ODk1My5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJj
ZXMAAAAAAHFTAFQAXwAyADAAZQAzADUAZQBiADUAMgA3AGMAMQA0AGQANQAzAGIAZQBhAGUAMgBi
ADcAYQA4AGQAZgA4ADgAOQA1ADMALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIA
YwBlAHMAAE1VAHMAZQByADoAOgBTAG8AdQByAGMAZQBGAGkAbABlAE4AYQBtAGUAXwBQAG8AdABl
AG4AdABpAGEAbABNAGEAbgBhAGcAZQByAHMAAC1VAHMAZQByADoAOgBTAG8AdQByAGMAZQBGAG8A
bABkAGUAcgBQAGEAdABoAAArVQBzAGUAcgA6ADoARQByAHIAbwByAEYAbwBsAGQAZQByAFAAYQB0
AGgAAANcAAAAuS0xWzWtM0+2ZJ8hBgOxcgAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEE
AAASFQQAABIZBQABARIZBAgAEhUECAASGQMGEgwEAAASDAQIABIMBiADAQ4ODgIGCAMGERQEAAAA
AAQBAAAABCABAQ4EIAEBCAYAARJREVUEIAASWQYgAgEOElkEBwESFQUgAQERYQgBAAIAAAAAAAMA
AAEEIAASbQQgABJxBSABEnUcAyAAHAMgAA4FBwMODg4GAAMODg4OAyAAAgQAAQ4OBwAEDg4ODg4G
AAMBDg4CBAABAQ4FAAIBDg4IBwQOEn0OEn1HAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjAB
AFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQoAQAjU1RfMjBlMzVlYjUy
N2MxNGQ1M2JlYWUyYjdhOGRmODg5NTMAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxNgAACAEA
CAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQCQMAAAAAAAAAAAAACuMAAAACAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAoDAAAAAAAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3Jl
ZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAApAMAAAAAAAAAAAAApAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABABsPLhcAAAEAGw8uFz8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBAQDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOACAAABADAAMAAw
ADAAMAA0AGIAMAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwAyADAAZQAzADUAZQBiADUAMgA3AGMAMQA0AGQANQAzAGIAZQBhAGUAMgBiADcAYQA4AGQAZgA4
ADgAOQA1ADMAAAA8AA4AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANQA5ADMA
NAAuADMAOAA2ADcAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADIAMABl
ADMANQBlAGIANQAyADcAYwAxADQAZAA1ADMAYgBlAGEAZQAyAGIANwBhADgAZABmADgAOAA5ADUA
MwAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQBy
AGkAZwBoAHQAIABAACAAIAAyADAAMQA2AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUA
bgBhAG0AZQAAAFMAVABfADIAMABlADMANQBlAGIANQAyADcAYwAxADQAZAA1ADMAYgBlAGEAZQAy
AGIANwBhADgAZABmADgAOAA5ADUAMwAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEA
bQBlAAAAAABTAFQAXwAyADAAZQAzADUAZQBiADUAMgA3AGMAMQA0AGQANQAzAGIAZQBhAGUAMgBi
ADcAYQA4AGQAZgA4ADgAOQA1ADMAAABAAA4AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADUAOQAzADQALgAzADgANgA3AAAARAAOAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBl
AHIAcwBpAG8AbgAAADEALgAwAC4ANQA5ADMANAAuADMAOAA2ADcAAAAAAAAAADAAAAwAAADAMAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Script Task"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{CB44E23E-2F84-4135-BE89-8CA6EA368A56}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Script Task"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_e5b91a8a0da04af1a444520eb59b1c54"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::BatchDate_PotentialManagers,User::ConnectionMgr_Stage,User::SelectedColumnRange_PotentialManagers,User::SourceFileName_PotentialManagers,User::SourceFolderPath"
              ReadWriteVariables="User::ProcessedRecordsInFile,User::TabName_PotentialManagers,User::TotalRecordsInFile">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_e5b91a8a0da04af1a444520eb59b1c54")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_e5b91a8a0da04af1a444520eb59b1c54")]
[assembly: AssemblyCopyright("Copyright @  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.Data.OleDb;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_e5b91a8a0da04af1a444520eb59b1c54
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        DataTable dtPotentialManagers = new DataTable();

        DataTable dtPotentialManagersAll = new DataTable();
        DataTable dtSymbol = new DataTable();
        DataTable dtShortName = new DataTable();
        DataTable dtGroup = new DataTable();
        DataTable dtCcy = new DataTable();
        DataTable dtLongName = new DataTable();
        DataTable dtNumberFormat = new DataTable();

        public int totalRecordsInFile = 0;
        public int processedRecordsInFile = 0;

        public const string LASTHEADERCELLTEXT = "NUMFORMAT";
        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here

            String ErrInfo = "";
            String sourceFolderPath = Dts.Variables["User::SourceFolderPath"].Value.ToString();
            String sourceFileName = Dts.Variables["User::SourceFileName_PotentialManagers"].Value.ToString();
            String FilePath = sourceFolderPath + sourceFileName;

            dtPotentialManagers.Columns.Add("SYMBOL", Type.GetType("System.String"));
            dtPotentialManagers.Columns.Add("SHORTNAM", Type.GetType("System.String"));
            dtPotentialManagers.Columns.Add("GROUP", Type.GetType("System.String"));
            dtPotentialManagers.Columns.Add("CCY", Type.GetType("System.String"));
            dtPotentialManagers.Columns.Add("LONGNAME", Type.GetType("System.String"));
            dtPotentialManagers.Columns.Add("NUMFORMAT", Type.GetType("System.String"));

            dtPotentialManagersAll.Columns.Add("FilePath", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("FileName", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("TabName", Type.GetType("System.String"));

            dtPotentialManagersAll.Columns.Add("SYMBOL", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("SHORTNAM", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("GROUP", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("CCY", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("LONGNAME", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("NUMFORMAT", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("Date", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("Value", Type.GetType("System.String"));

            //try
            //{                
            ReadFile(FilePath, ErrInfo);
            if (ErrInfo.Length > 0)
            {
                Dts.Log("Error while reading File " + FilePath, 0, null);
                Dts.Log(ErrInfo, 0, null);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            else
            {
                Dts.TaskResult = (int)ScriptResults.Success;
            }

            Dts.TaskResult = (int)ScriptResults.Success;
        }


        public void ReadFile(String FilePath, String ErrInfo)
        {
            string strConnection = string.Empty;
            //try
            //{
            string tabName = Dts.Variables["User::TabName_PotentialManagers"].Value.ToString();
            string selectedColumnRange = Dts.Variables["User::SelectedColumnRange_PotentialManagers"].Value.ToString();
            int lastIndexOf = FilePath.LastIndexOf('\\');
            string fileName = FilePath.Substring(lastIndexOf + 1);

            DateTime BatchDate = DateTime.Now;
            if (Dts.Variables["User::BatchDate_PotentialManagers"].Value.ToString().Trim().Length > 0)
            {
                BatchDate = Convert.ToDateTime(Dts.Variables["User::BatchDate_PotentialManagers"].Value.ToString().Trim());
            }

            strConnection = String.Format(@"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + FilePath + ";Extended Properties=\"Excel 12.0 Xml;HDR=NO;IMEX=1\";");

            OleDbConnection objConnection = new OleDbConnection(strConnection);
            objConnection.Open();
            DataTable colTables = objConnection.GetSchema("Tables");

            string strSQL = "Select * From [" + tabName + selectedColumnRange + "]";

            OleDbDataAdapter objAdapter = new OleDbDataAdapter(strSQL, objConnection);
            DataTable dt = new DataTable();
            objAdapter.Fill(dt);

            //Close Connection
            objConnection.Close();

            //Delete the Date header
            int dateRowHeaderIndex = 0;
            foreach (DataRow dr in dt.Rows)
            {
                dateRowHeaderIndex++;
                if (dr[0].ToString().Trim().ToUpper() == LASTHEADERCELLTEXT)
                    break;
            }
            //dt.Rows[dateRowHeaderIndex-1].Delete();
            //dt.AcceptChanges();

            //Extract the Benchmarkregion Details (First Three rows of the excel sheet)
            DataRow drSymbol = dt.Rows[0];
            DataRow drShortName = dt.Rows[1];
            DataRow drGroup = dt.Rows[2];
            DataRow drCCY = dt.Rows[3];
            DataRow drLongName = dt.Rows[4];
            DataRow drNumberFormat = dt.Rows[5];

            DataRow dRowPotentialManagers;
            for (int i = 0; i < dt.Columns.Count - 1; i++)
            {
                dRowPotentialManagers = dtPotentialManagers.NewRow();
                dRowPotentialManagers["SYMBOL"] = drSymbol[i + 1].ToString().Trim();
                dRowPotentialManagers["SHORTNAM"] = drShortName[i + 1].ToString().Trim();
                dRowPotentialManagers["GROUP"] = drGroup[i + 1].ToString().Trim();
                dRowPotentialManagers["CCY"] = drCCY[i + 1].ToString().Trim();
                dRowPotentialManagers["LONGNAME"] = drLongName[i + 1].ToString().Trim();
                dRowPotentialManagers["NUMFORMAT"] = drNumberFormat[i + 1].ToString().Trim();
                dtPotentialManagers.Rows.Add(dRowPotentialManagers);
            }


            //Now Extract the PotentialManagers Details againest SYMBOL(First Six rows of the excel sheet)
            DataRow dRow;
            string date = string.Empty;

            for (int i = 0; i < dt.Columns.Count - 1; i++)
            {
                for (int j = dateRowHeaderIndex; j < dt.Rows.Count; j++)
                {
                    if (dt.Rows[j][0].ToString().Trim().Length > 0)
                    {
                        dRow = dtPotentialManagersAll.NewRow();

                        dRow["FilePath"] = FilePath;
                        dRow["FileName"] = fileName;
                        dRow["TabName"] = tabName.Trim(); // tabName.TrimEnd('$').Trim();

                        dRow["SYMBOL"] = dtPotentialManagers.Rows[i][0].ToString().Trim().Replace("'", "''");
                        dRow["SHORTNAM"] = dtPotentialManagers.Rows[i][1].ToString().Trim().Replace("'", "''");
                        dRow["GROUP"] = dtPotentialManagers.Rows[i][2].ToString().Trim().Replace("'", "''");
                        dRow["CCY"] = dtPotentialManagers.Rows[i][3].ToString().Trim().Replace("'", "''");
                        dRow["LONGNAME"] = dtPotentialManagers.Rows[i][4].ToString().Trim().Replace("'", "''");
                        dRow["NUMFORMAT"] = dtPotentialManagers.Rows[i][5].ToString().Trim().Replace("'", "''");

                        date = dt.Rows[j][0].ToString().Trim();
                        //if (!dt.Rows[j][0].ToString().Trim().Contains("/"))
                        //{
                        //    dRow["Date"] = DateTime.FromOADate(Convert.ToDouble(dt.Rows[j][0].ToString().Trim()));//Convert.ToDateTime(dt.Rows[j][0].ToString().Trim());
                        //}
                        //else if (dt.Rows[j][0].ToString().Trim().Contains("/"))
                        //{
                        //    dRow["Date"] = Convert.ToDateTime(dt.Rows[j][0].ToString().Trim());
                        //}
                        dRow["Date"] = dt.Rows[j][0].ToString().Trim();
                        dRow["Value"] = dt.Rows[j][i + 1].ToString().Trim();

                        dtPotentialManagersAll.Rows.Add(dRow);
                        totalRecordsInFile++;
                    }
                    else
                    {
                        continue;
                    }
                }
            }

            //Get The ConnectionString For Database
            string strConn = Dts.Variables["User::ConnectionMgr_Stage"].Value.ToString().Trim();
            //string strConn = Dts.Connections["SeaBIRd_Stage"].ConnectionString;
            OleDbConnection connection = new OleDbConnection(strConn);
            connection.Open();
            //Convert batchDate to "mm/dd/yyyy" format
            string batchDate = String.Format("{0:MM/dd/yyyy}", BatchDate);

            using (OleDbCommand oleComm = new OleDbCommand())
            {
                try
                {
                    oleComm.Connection = connection;
                    foreach (DataRow dr in dtPotentialManagersAll.Rows)
                    {
                        oleComm.CommandText = "INSERT INTO stg.PotentialManagers (FileName, FilePath, TabName, [SYMBOL], SHORTNAM, [GROUP], CCY, LONGNAME, NUMFORMAT, DATE, Value, Batchdate) VALUES ('" + dr["FileName"].ToString().Trim() + "','" + dr["FilePath"].ToString().Trim() + "','" + dr["TabName"].ToString().Trim() + "','" + dr["SYMBOL"].ToString().Trim() + "','" + dr["SHORTNAM"].ToString().Trim() + "','" + dr["GROUP"].ToString().Trim() + "','" + dr["CCY"].ToString().Trim() + "','" + dr["LONGNAME"].ToString().Trim() + "','" + dr["NUMFORMAT"].ToString().Trim() + "','" + dr["Date"].ToString().Trim() + "','" + dr["Value"].ToString().Trim() + "'," + "CAST('" + batchDate + "' AS Date))";
                        int i = oleComm.ExecuteNonQuery();

                        processedRecordsInFile++;
                    }

                    connection.Close();
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                }

                Dts.Variables["User::ProcessedRecordsInFile"].Value = processedRecordsInFile;
                Dts.Variables["User::TotalRecordsInFile"].Value = totalRecordsInFile;
                //Dts.Variables["User::TabName_PotentialManagers"].Value
            }


            //    Dts.TaskResult = (int)ScriptResults.Success;  
            //}
            //catch (Exception e)
            //{                
            //    ErrInfo = e.Message;                
            //}

        }       


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="ST_e5b91a8a0da04af1a444520eb59b1c54.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{08854C81-FB0B-41B6-8E09-BF3FA170F750}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_e5b91a8a0da04af1a444520eb59b1c54</RootNamespace>
    <AssemblyName>ST_e5b91a8a0da04af1a444520eb59b1c54</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_e5b91a8a0da04af1a444520eb59b1c54</msb:CodeName>
		<msb:DisplayName>ST_e5b91a8a0da04af1a444520eb59b1c54</msb:DisplayName>
		<msb:ProjectId>{2279C502-3A1D-4F6A-BF82-68995B376179}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_e5b91a8a0da04af1a444520eb59b1c54.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e5b91a8a0da04af1a444520eb59b1c54.Properties.Settings.get_Default():ST_e5b91a8a0da04af1a444520eb59b1c54.Properties.Sett" +
    "ings")]

namespace ST_e5b91a8a0da04af1a444520eb59b1c54.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e5b91a8a0da04af1a444520eb59b1c54.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e5b91a8a0da04af1a444520eb59b1c54.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e5b91a8a0da04af1a444520eb59b1c54.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_e5b91a8a0da04af1a444520eb59b1c54.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_e5b91a8a0da04af1a444520eb59b1c54.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_e5b91a8a0da04af1a444520eb59b1c54.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAKX4/FYAAAAAAAAAAOAAAiELAQsAACYAAAAGAAAAAAAAjkUA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAADxFAABPAAAAAGAAAAAEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAlCUAAAAgAAAAJgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAAEAAAAYAAAAAQAAAAoAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAALAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABw
RQAAAAAAAEgAAAACAAUAuC0AAIQXAAABAAAAAAAAAAAtAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABMwBADMAgAAAgAAEXJzAABwCgIoFgAACm8XAAAKcnUAAHBvGAAACm8Z
AAAKbxoAAAoLAigWAAAKbxcAAApyowAAcG8YAAAKbxkAAApvGgAACgwHCCgbAAAKDQJ7BQAABG8c
AAAKcvEAAHBy/wAAcCgdAAAKbx4AAAomAnsFAAAEbxwAAApyGwEAcHL/AABwKB0AAApvHgAACiYC
ewUAAARvHAAACnItAQBwcv8AAHAoHQAACm8eAAAKJgJ7BQAABG8cAAAKcjkBAHBy/wAAcCgdAAAK
bx4AAAomAnsFAAAEbxwAAApyQQEAcHL/AABwKB0AAApvHgAACiYCewUAAARvHAAACnJTAQBwcv8A
AHAoHQAACm8eAAAKJgJ7BgAABG8cAAAKcmcBAHBy/wAAcCgdAAAKbx4AAAomAnsGAAAEbxwAAApy
eQEAcHL/AABwKB0AAApvHgAACiYCewYAAARvHAAACnKLAQBwcv8AAHAoHQAACm8eAAAKJgJ7BgAA
BG8cAAAKcvEAAHBy/wAAcCgdAAAKbx4AAAomAnsGAAAEbxwAAApyGwEAcHL/AABwKB0AAApvHgAA
CiYCewYAAARvHAAACnItAQBwcv8AAHAoHQAACm8eAAAKJgJ7BgAABG8cAAAKcjkBAHBy/wAAcCgd
AAAKbx4AAAomAnsGAAAEbxwAAApyQQEAcHL/AABwKB0AAApvHgAACiYCewYAAARvHAAACnJTAQBw
cv8AAHAoHQAACm8eAAAKJgJ7BgAABG8cAAAKcpsBAHBy/wAAcCgdAAAKbx4AAAomAnsGAAAEbxwA
AApypQEAcHL/AABwKB0AAApvHgAACiYCCQYoCQAABgZvHwAAChYxNAIoFgAACnKxAQBwCSgbAAAK
FhRvIAAACgIoFgAACgYWFG8gAAAKAigWAAAKF28hAAAKKwwCKBYAAAoWbyEAAAoCKBYAAAoWbyEA
AAoqGzAFAIkIAAADAAARfiIAAAoKAigWAAAKbxcAAApy5QEAcG8YAAAKbxkAAApvGgAACgsCKBYA
AApvFwAACnIlAgBwbxgAAApvGQAACm8aAAAKDAMfXG8jAAAKDQMJF1hvJAAAChMEKCUAAAoTBQIo
FgAACm8XAAAKcn0CAHBvGAAACm8ZAAAKbxoAAApvJgAACm8fAAAKFjErAigWAAAKbxcAAApyfQIA
cG8YAAAKbxkAAApvGgAACm8mAAAKKCcAAAoTBXLBAgBwA3IfAwBwKCgAAAoWjQEAAAEoKQAACgoG
cyoAAAoTBhEGbysAAAoRBnKJAwBwbywAAAomcpcDAHAHCHK3AwBwKC0AAAoTBxEHEQZzLgAAChMI
cy8AAAoTCREIEQlvMAAACiYRBm8xAAAKFhMKEQlvMgAACm8zAAAKEx0rNxEdbzQAAAp0KwAAARML
EQoXWBMKEQsWbzUAAApvGgAACm8mAAAKbzYAAApyUwEAcCg3AAAKLQkRHW84AAAKLcDeFREddSwA
AAETHhEeLAcRHm85AAAK3BEJbzIAAAoWbzoAAAoTDBEJbzIAAAoXbzoAAAoTDREJbzIAAAoYbzoA
AAoTDhEJbzIAAAoZbzoAAAoTDxEJbzIAAAoabzoAAAoTEBEJbzIAAAobbzoAAAoTERYTEzjrAAAA
AnsFAAAEbzsAAAoTEhEScvEAAHARDBETF1hvNQAACm8aAAAKbyYAAApvPAAAChESchsBAHARDRET
F1hvNQAACm8aAAAKbyYAAApvPAAAChESci0BAHARDhETF1hvNQAACm8aAAAKbyYAAApvPAAAChES
cjkBAHARDxETF1hvNQAACm8aAAAKbyYAAApvPAAAChESckEBAHAREBETF1hvNQAACm8aAAAKbyYA
AApvPAAAChESclMBAHARERETF1hvNQAACm8aAAAKbyYAAApvPAAACgJ7BQAABG8yAAAKERJvPQAA
ChETF1gTExETEQlvHAAACm8+AAAKF1k/AP///34iAAAKJhYTFTiPAgAAEQoTFjhtAgAAEQlvMgAA
ChEWbzoAAAoWbzUAAApvGgAACm8mAAAKbx8AAAoWPj4CAAACewYAAARvOwAAChMUERRyZwEAcANv
PAAAChEUcnkBAHARBG88AAAKERRyiwEAcAdvJgAACm88AAAKERRy8QAAcAJ7BQAABG8yAAAKERVv
OgAAChZvNQAACm8aAAAKbyYAAApyuwMAcHK/AwBwbz8AAApvPAAAChEUchsBAHACewUAAARvMgAA
ChEVbzoAAAoXbzUAAApvGgAACm8mAAAKcrsDAHByvwMAcG8/AAAKbzwAAAoRFHItAQBwAnsFAAAE
bzIAAAoRFW86AAAKGG81AAAKbxoAAApvJgAACnK7AwBwcr8DAHBvPwAACm88AAAKERRyOQEAcAJ7
BQAABG8yAAAKERVvOgAAChlvNQAACm8aAAAKbyYAAApyuwMAcHK/AwBwbz8AAApvPAAAChEUckEB
AHACewUAAARvMgAAChEVbzoAAAoabzUAAApvGgAACm8mAAAKcrsDAHByvwMAcG8/AAAKbzwAAAoR
FHJTAQBwAnsFAAAEbzIAAAoRFW86AAAKG281AAAKbxoAAApvJgAACnK7AwBwcr8DAHBvPwAACm88
AAAKEQlvMgAAChEWbzoAAAoWbzUAAApvGgAACm8mAAAKJhEUcpsBAHARCW8yAAAKERZvOgAAChZv
NQAACm8aAAAKbyYAAApvPAAAChEUcqUBAHARCW8yAAAKERZvOgAAChEVF1hvNQAACm8aAAAKbyYA
AApvPAAACgJ7BgAABG8yAAAKERRvPQAACgIlew0AAAQXWH0NAAAEERYXWBMWERYRCW8yAAAKbz4A
AAo/gP3//xEVF1gTFREVEQlvHAAACm8+AAAKF1k/XP3//wIoFgAACm8XAAAKcsUDAHBvGAAACm8Z
AAAKbxoAAApvJgAAChMXERdzKgAAChMYERhvKwAACnL5AwBwEQWMIgAAAShAAAAKExlzQQAAChMa
ERoRGG9CAAAKAnsGAAAEbzIAAApvMwAAChMfOOQBAAARH280AAAKdCsAAAETGxEaHxmNHwAAARMg
ESAWchcEAHCiESAXERtyeQEAcG9DAAAKbxoAAApvJgAACqIRIBhySgUAcKIRIBkRG3JnAQBwb0MA
AApvGgAACm8mAAAKohEgGnJKBQBwohEgGxEbcosBAHBvQwAACm8aAAAKbyYAAAqiESAcckoFAHCi
ESAdERty8QAAcG9DAAAKbxoAAApvJgAACqIRIB5ySgUAcKIRIB8JERtyGwEAcG9DAAAKbxoAAApv
JgAACqIRIB8KckoFAHCiESAfCxEbci0BAHBvQwAACm8aAAAKbyYAAAqiESAfDHJKBQBwohEgHw0R
G3I5AQBwb0MAAApvGgAACm8mAAAKohEgHw5ySgUAcKIRIB8PERtyQQEAcG9DAAAKbxoAAApvJgAA
CqIRIB8QckoFAHCiESAfEREbclMBAHBvQwAACm8aAAAKbyYAAAqiESAfEnJKBQBwohEgHxMRG3Kb
AQBwb0MAAApvGgAACm8mAAAKohEgHxRySgUAcKIRIB8VERtypQEAcG9DAAAKbxoAAApvJgAACqIR
IB8WclIFAHCiESAfFxEZohEgHxhyZAUAcKIRIChEAAAKb0UAAAoRGm9GAAAKJgIlew4AAAQXWH0O
AAAEER9vOAAACjoQ/v//3hURH3UsAAABEyERISwHESFvOQAACtwRGG8xAAAK3gwTHBEcb0cAAAom
3gACKBYAAApvFwAACnJ8BQBwbxgAAAoCew4AAASMMAAAAW9IAAAKAigWAAAKbxcAAApytgUAcG8Y
AAAKAnsNAAAEjDAAAAFvSAAACt4MERosBxEabzkAAArcKgAAAEFkAAACAAAANwEAAEQAAAB7AQAA
FQAAAAAAAAACAAAADwYAAPcBAAAGCAAAFQAAAAAAAAAAAAAA9AUAADACAAAkCAAADAAAAC8AAAEC
AAAA9AUAAIgCAAB8CAAADAAAAAAAAAADMAIAXwAAAAAAAAACcy8AAAp9BQAABAJzLwAACn0GAAAE
AnMvAAAKfQcAAAQCcy8AAAp9CAAABAJzLwAACn0JAAAEAnMvAAAKfQoAAAQCcy8AAAp9CwAABAJz
LwAACn0MAAAEAihJAAAKKgAAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJl
c291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWws
IFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1l
UmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMw
MzE5AAAAAAUAbAAAALgFAAAjfgAAJAYAANQIAAAjU3RyaW5ncwAAAAD4DgAA6AUAACNVUwDgFAAA
EAAAACNHVUlEAAAA8BQAAJQCAAAjQmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+iUzABYAAAEAAAAw
AAAABQAAABEAAAAKAAAAAwAAAEkAAAADAAAADwAAAAMAAAACAAAAAwAAAAQAAAABAAAABQAAAAEA
AAABAAAAAAAKAAEAAAAAAAYAwQC6AAoA3QDIAA4APQEUAQYAWQG6AAYAbwFeAQYAoAGLARIAOQIt
AgYALAMSAwYAVwNFAwYAbgNFAwYAiwNFAwYAqgNFAwYAwwNFAwYA3ANFAwYA9wNFAwYAEgRFAwYA
KwRFAwYAZAREBAYAhAREBAYAtQSiBAYA0gS6AAYA1wS6AAYA+wRFAwoAJwURBQoAQAURBQYAVQVE
BA4AdwUUAQ4AmQUUARYA8gXSBRYACgbSBQYALwa6ABIAPQYtAhIAZgYtAgYArwa6AAYAxQa6ABIA
8QbfBhIAFAcBBxIAMAffBhIAQQcBBxIAWgctAhIAdQctAgYAoweQBxIAyQctAgYA7ge6ABIAJAjf
BhIAQAgBBwYAagi6AAYAgAi6AAAAAAABAAAAAAABAAEAAAAQADIAPAAFAAEAAQAAARAAawA8AAkA
AwAFAAEAEAB0AH8ADQAEAAgAAwEAAKMAAAARAA8ACwARAH8BEwARAKwBFwARAPYBOQBWgBoCRwAB
AEMCXQABAFcCXQABAG4CXQABAHcCXQABAIMCXQABAIsCXQABAJECXQABAJwCXQAGAKsCYQAGAL4C
YQAGBuMCYQBWgOsCagBWgPMCagBQIAAAAACDGLwBGwABAFggAAAAAJMIwgEfAAEAkSAAAAAAkwjW
ASQAAQCYIAAAAACTCOIBKQABAKAgAAAAAJYIBgI9AAIAsyAAAAAAhhi8ARsAAgCnIAAAAACRGHAF
qQACALwgAAAAAIYA1QIbAAIAlCMAAAAAhgDaAmQAAgCQLAAAAACGGLwBGwAEAAAAAQD7AgAAAQAB
AwAAAgAKA0EAvAF4AEkAvAF4AFEAvAF4AFkAvAF4AGEAvAF4AGkAvAF4AHEAvAF4AHkAvAF4AIEA
vAF4AIkAvAF4AJEAvAF9AJkAvAEbAKEAvAEbAAkAvAEbAKkA6QSCAKkABAWJACkAvAGOAMEAvAGa
ANEAvAEbABEAvAEbANkAvAEbABkAqwWtAOEA/AWyAOkAEwa3APEAHAa9AAkAJgbBAPkANgbFADkA
UgbLAKkAXgbRAAEBcQbXAPkAdQbgAOEAgAbkAOEAhAZ9APkAkwZHAPkAmQbzAPkApQb4ABEBuAb9
APkAwAbBABkBzQYDAfkANgYKAfkA2AYRASEBvAF4ACkBIQcbACkBJgcYAfkANgYeATEBvAEmATkA
vAEbADkBTwcuASkBVAcbADkAbAc0AUkBrwc6AVEBvQe9AFkBEwZAAfkA0QfBAPkA2QdFAVEB5QdL
AWEB+gcbAEEBEwZPATkAAghWAVkBCQhcAUEBcQZiAUkBEgjgAPkAHAhpAfkA2AZvAWkBvAEbAGkB
MQh1AVkBEwZ8AfkANgaBAXEBSgh4AHEBWgjgAHkBdAjBAPEAhgiHARkAvAEbAA4AEABKAAgAQABu
AAgARABzACkAkwCgAC4AGwBMAi4AIwBMAi4AYwByAi4ACwDbAS4AEwAjAi4AMwAjAi4AKwBMAi4A
OwBSAi4AQwBMAi4AWwBpAkMAawBzAEkAkwCgAGEAmwBzAIMAqwBzAJUA7ACMAQIAAQADAAMAAABv
AS8AAADuATQAAAASAkIAAgACAAMAAgADAAUAAQAEAAUAAgAFAAcABIAAAAEAAAAuF9IPAAAAAAAA
fwAAAAQAAAAAAAAAAAAAAAEAsQAAAAAABAAAAAAAAAAAAAAAAQC6AAAAAAAMAAAAAAAAAAAAAAAK
APUAAAAAAAQAAAAAAAAAAAAAAAEALQIAAAAADAAAAAAAAAAAAAAACgCzBQAAAAAAAAAAAQAAAJAI
AAAFAAQAAAAAAAA8TW9kdWxlPgBTVF9lNWI5MWE4YTBkYTA0YWYxYTQ0NDUyMGViNTliMWM1NC5k
bGwAUmVzb3VyY2VzAFNUX2U1YjkxYThhMGRhMDRhZjFhNDQ0NTIwZWI1OWIxYzU0LlByb3BlcnRp
ZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF9lNWI5MWE4YTBkYTA0YWYxYTQ0NDUyMGViNTliMWM1
NABTY3JpcHRSZXN1bHRzAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRp
b24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNr
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2Jq
ZWN0TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3Vy
Y2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5j
dG9yAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBk
ZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVsdABMQVNUSEVBREVSQ0VMTFRFWFQAU3lz
dGVtLkRhdGEARGF0YVRhYmxlAGR0UG90ZW50aWFsTWFuYWdlcnMAZHRQb3RlbnRpYWxNYW5hZ2Vy
c0FsbABkdFN5bWJvbABkdFNob3J0TmFtZQBkdEdyb3VwAGR0Q2N5AGR0TG9uZ05hbWUAZHROdW1i
ZXJGb3JtYXQAdG90YWxSZWNvcmRzSW5GaWxlAHByb2Nlc3NlZFJlY29yZHNJbkZpbGUATWFpbgBS
ZWFkRmlsZQB2YWx1ZV9fAFN1Y2Nlc3MARmFpbHVyZQB2YWx1ZQBGaWxlUGF0aABFcnJJbmZvAFN5
c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAFN5c3RlbS5S
ZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJp
YnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmli
dXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBB
c3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1dGUAQXNzZW1i
bHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGls
YXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBT
eXN0ZW0uRGlhZ25vc3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRp
bWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0
ZW0uQ29tcG9uZW50TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJs
ZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBTU0lTU2NyaXB0VGFza0Vu
dHJ5UG9pbnRBdHRyaWJ1dGUAU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3Fs
U2VydmVyLk1hbmFnZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJpYWJs
ZXMAZ2V0X1ZhcmlhYmxlcwBWYXJpYWJsZQBnZXRfSXRlbQBnZXRfVmFsdWUAVG9TdHJpbmcAU3Ry
aW5nAENvbmNhdABEYXRhQ29sdW1uQ29sbGVjdGlvbgBnZXRfQ29sdW1ucwBHZXRUeXBlAERhdGFD
b2x1bW4AQWRkAGdldF9MZW5ndGgATG9nAHNldF9UYXNrUmVzdWx0AEVtcHR5AExhc3RJbmRleE9m
AFN1YnN0cmluZwBEYXRlVGltZQBnZXRfTm93AFRyaW0AQ29udmVydABUb0RhdGVUaW1lAEZvcm1h
dABTeXN0ZW0uRGF0YS5PbGVEYgBPbGVEYkNvbm5lY3Rpb24AU3lzdGVtLkRhdGEuQ29tbW9uAERi
Q29ubmVjdGlvbgBPcGVuAEdldFNjaGVtYQBPbGVEYkRhdGFBZGFwdGVyAERiRGF0YUFkYXB0ZXIA
RmlsbABDbG9zZQBEYXRhUm93Q29sbGVjdGlvbgBnZXRfUm93cwBJbnRlcm5hbERhdGFDb2xsZWN0
aW9uQmFzZQBTeXN0ZW0uQ29sbGVjdGlvbnMASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgBnZXRf
Q3VycmVudABEYXRhUm93AFRvVXBwZXIAb3BfRXF1YWxpdHkATW92ZU5leHQASURpc3Bvc2FibGUA
RGlzcG9zZQBOZXdSb3cAc2V0X0l0ZW0AZ2V0X0NvdW50AFJlcGxhY2UAT2xlRGJDb21tYW5kAHNl
dF9Db25uZWN0aW9uAERiQ29tbWFuZABzZXRfQ29tbWFuZFRleHQARXhlY3V0ZU5vblF1ZXJ5AEV4
Y2VwdGlvbgBnZXRfTWVzc2FnZQBJbnQzMgBzZXRfVmFsdWUAU1RfZTViOTFhOGEwZGEwNGFmMWE0
NDQ1MjBlYjU5YjFjNTQuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAAAAcVMAVABfAGUA
NQBiADkAMQBhADgAYQAwAGQAYQAwADQAYQBmADEAYQA0ADQANAA1ADIAMABlAGIANQA5AGIAMQBj
ADUANAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAQAtVQBzAGUA
cgA6ADoAUwBvAHUAcgBjAGUARgBvAGwAZABlAHIAUABhAHQAaAAATVUAcwBlAHIAOgA6AFMAbwB1
AHIAYwBlAEYAaQBsAGUATgBhAG0AZQBfAFAAbwB0AGUAbgB0AGkAYQBsAE0AYQBuAGEAZwBlAHIA
cwAADVMAWQBNAEIATwBMAAAbUwB5AHMAdABlAG0ALgBTAHQAcgBpAG4AZwAAEVMASABPAFIAVABO
AEEATQAAC0cAUgBPAFUAUAAAB0MAQwBZAAARTABPAE4ARwBOAEEATQBFAAATTgBVAE0ARgBPAFIA
TQBBAFQAABFGAGkAbABlAFAAYQB0AGgAABFGAGkAbABlAE4AYQBtAGUAAA9UAGEAYgBOAGEAbQBl
AAAJRABhAHQAZQAAC1YAYQBsAHUAZQAAM0UAcgByAG8AcgAgAHcAaABpAGwAZQAgAHIAZQBhAGQA
aQBuAGcAIABGAGkAbABlACAAAD9VAHMAZQByADoAOgBUAGEAYgBOAGEAbQBlAF8AUABvAHQAZQBu
AHQAaQBhAGwATQBhAG4AYQBnAGUAcgBzAABXVQBzAGUAcgA6ADoAUwBlAGwAZQBjAHQAZQBkAEMA
bwBsAHUAbQBuAFIAYQBuAGcAZQBfAFAAbwB0AGUAbgB0AGkAYQBsAE0AYQBuAGEAZwBlAHIAcwAA
Q1UAcwBlAHIAOgA6AEIAYQB0AGMAaABEAGEAdABlAF8AUABvAHQAZQBuAHQAaQBhAGwATQBhAG4A
YQBnAGUAcgBzAABdUAByAG8AdgBpAGQAZQByAD0ATQBpAGMAcgBvAHMAbwBmAHQALgBBAEMARQAu
AE8ATABFAEQAQgAuADEAMgAuADAAOwBEAGEAdABhACAAUwBvAHUAcgBjAGUAPQAAaTsARQB4AHQA
ZQBuAGQAZQBkACAAUAByAG8AcABlAHIAdABpAGUAcwA9ACIARQB4AGMAZQBsACAAMQAyAC4AMAAg
AFgAbQBsADsASABEAFIAPQBOAE8AOwBJAE0ARQBYAD0AMQAiADsAAA1UAGEAYgBsAGUAcwAAH1MA
ZQBsAGUAYwB0ACAAKgAgAEYAcgBvAG0AIABbAAADXQAAAycAAQUnACcAATNVAHMAZQByADoAOgBD
AG8AbgBuAGUAYwB0AGkAbwBuAE0AZwByAF8AUwB0AGEAZwBlAAAdewAwADoATQBNAC8AZABkAC8A
eQB5AHkAeQB9AACBMUkATgBTAEUAUgBUACAASQBOAFQATwAgAHMAdABnAC4AUABvAHQAZQBuAHQA
aQBhAGwATQBhAG4AYQBnAGUAcgBzACAAKABGAGkAbABlAE4AYQBtAGUALAAgAEYAaQBsAGUAUABh
AHQAaAAsACAAVABhAGIATgBhAG0AZQAsACAAWwBTAFkATQBCAE8ATABdACwAIABTAEgATwBSAFQA
TgBBAE0ALAAgAFsARwBSAE8AVQBQAF0ALAAgAEMAQwBZACwAIABMAE8ATgBHAE4AQQBNAEUALAAg
AE4AVQBNAEYATwBSAE0AQQBUACwAIABEAEEAVABFACwAIABWAGEAbAB1AGUALAAgAEIAYQB0AGMA
aABkAGEAdABlACkAIABWAEEATABVAEUAUwAgACgAJwABBycALAAnAAERJwAsAEMAQQBTAFQAKAAn
AAEXJwAgAEEAUwAgAEQAYQB0AGUAKQApAAE5VQBzAGUAcgA6ADoAUAByAG8AYwBlAHMAcwBlAGQA
UgBlAGMAbwByAGQAcwBJAG4ARgBpAGwAZQAAMVUAcwBlAHIAOgA6AFQAbwB0AGEAbABSAGUAYwBv
AHIAZABzAEkAbgBGAGkAbABlAAB+ssiYRGs3T4YyO9KOcSO4AAi3elxWGTTgiQiJhF3NgIDMkQMG
EhUDBhIZAyAAAQQAABIVBAAAEhkFAAEBEhkECAASFQQIABIZAwYSDAQAABIMBAgAEgwCBg4STgBV
AE0ARgBPAFIATQBBAFQAAwYSHQIGCAUgAgEODgMGERQEAAAAAAQBAAAABCABAQ4EIAEBCAYAARJV
EVkEIAASXQYgAgEOEl0EBwESFQUgAQERZQgBAAIAAAAAAAMAAAEEIAAScQQgABJ1BSABEnkcAyAA
HAMgAA4FAAIODg4FIAASgIEFAAESVQ4IIAISgIUOElUDIAAIByADAQ4IHQUGBwQODg4OBCABCAME
IAEOCAUAABGAiQYAARGAiQ4GAAMODg4OBgACDg4dHAUgARIdDgcABA4ODg4OByACAQ4SgJEFIAEI
Eh0FIAASgKEFIAASgKkEIAEcCAUAAgIODgMgAAIGIAESgK0IBSAAEoCtBSACAQ4cBiABARKArQUg
Ag4ODgUAAg4OHAYgAQESgJEEIAEcDgUAAQ4dDgQgAQEcTgciDg4OCA4RgIkSgJEOEoCZEh0IEoCt
EoCtEoCtEoCtEoCtEoCtEoCtEoCtCBKArQgIDhKAkQ4SgLUSgK0SgL0SgKkSgLESgKkdDhKAsUcB
ABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUQLk5F
VCBGcmFtZXdvcmsgNCgBACNTVF9lNWI5MWE4YTBkYTA0YWYxYTQ0NDUyMGViNTliMWM1NAAABQEA
AAAAFgEAEUNvcHlyaWdodCBAICAyMDE2AAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRp
b25UaHJvd3MBAAAAZEUAAAAAAAAAAAAAfkUAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBFAAAA
AAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAA
GAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAACk
AwAAAAAAAAAAAACkAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAA
AQAAAAEA0g8uFwAAAQDSDy4XPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQBy
AEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAE
BAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA4AIAAAEAMAAwADAAMAAwADQAYgAw
AAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfAGUANQBiADkA
MQBhADgAYQAwAGQAYQAwADQAYQBmADEAYQA0ADQANAA1ADIAMABlAGIANQA5AGIAMQBjADUANAAA
ADwADgABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA1ADkAMwA0AC4ANAAwADUA
MAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AZQA1AGIAOQAxAGEAOABh
ADAAZABhADAANABhAGYAMQBhADQANAA0ADUAMgAwAGUAYgA1ADkAYgAxAGMANQA0AC4AZABsAGwA
AABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAg
AEAAIAAgADIAMAAxADYAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAA
UwBUAF8AZQA1AGIAOQAxAGEAOABhADAAZABhADAANABhAGYAMQBhADQANAA0ADUAMgAwAGUAYgA1
ADkAYgAxAGMANQA0AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMA
VABfAGUANQBiADkAMQBhADgAYQAwAGQAYQAwADQAYQBmADEAYQA0ADQANAA1ADIAMABlAGIANQA5
AGIAMQBjADUANAAAAEAADgABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
NQA5ADMANAAuADQAMAA1ADAAAABEAA4AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBu
AAAAMQAuADAALgA1ADkAMwA0AC4ANAAwADUAMAAAAAAAAAAAQAAADAAAAJA1AAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Script Task Quarterly"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{A8DEBA5F-5C68-4EE8-95D6-E717FE21CE56}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Script Task Quarterly"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_04ee33c9be844dd3a4fd74899ff82ffc"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::BatchDate_PotentialManagers,User::ConnectionMgr_Stage,User::SelectedColumnRange_PotentialManagers_Quarterly,User::SourceFileName_PotentialManagers,User::SourceFolderPath"
              ReadWriteVariables="User::ProcessedRecordsInFile,User::TabName_PotentialManagers_Quarterly,User::TotalRecordsInFile">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_04ee33c9be844dd3a4fd74899ff82ffc")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_04ee33c9be844dd3a4fd74899ff82ffc")]
[assembly: AssemblyCopyright("Copyright @  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_04ee33c9be844dd3a4fd74899ff82ffc.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{AE7CD2F3-FDB6-4C69-8279-2AD6DAC9B39E}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_04ee33c9be844dd3a4fd74899ff82ffc</RootNamespace>
    <AssemblyName>ST_04ee33c9be844dd3a4fd74899ff82ffc</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.Data.OleDb;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_04ee33c9be844dd3a4fd74899ff82ffc
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        DataTable dtPotentialManagers = new DataTable();

        DataTable dtPotentialManagersAll = new DataTable();
        DataTable dtSymbol = new DataTable();
        DataTable dtShortName = new DataTable();
        DataTable dtGroup = new DataTable();
        DataTable dtCcy = new DataTable();
        DataTable dtLongName = new DataTable();
        DataTable dtNumberFormat = new DataTable();

        public int totalRecordsInFile = 0;
        public int processedRecordsInFile = 0;

        public const string LASTHEADERCELLTEXT = "NUMFORMAT";
        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here

            String ErrInfo = "";
            String sourceFolderPath = Dts.Variables["User::SourceFolderPath"].Value.ToString();
            String sourceFileName = Dts.Variables["User::SourceFileName_PotentialManagers"].Value.ToString();
            String FilePath = sourceFolderPath + sourceFileName;

            dtPotentialManagers.Columns.Add("SYMBOL", Type.GetType("System.String"));
            dtPotentialManagers.Columns.Add("SHORTNAM", Type.GetType("System.String"));
            dtPotentialManagers.Columns.Add("GROUP", Type.GetType("System.String"));
            dtPotentialManagers.Columns.Add("CCY", Type.GetType("System.String"));
            dtPotentialManagers.Columns.Add("LONGNAME", Type.GetType("System.String"));
            dtPotentialManagers.Columns.Add("NUMFORMAT", Type.GetType("System.String"));

            dtPotentialManagersAll.Columns.Add("FilePath", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("FileName", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("TabName", Type.GetType("System.String"));

            dtPotentialManagersAll.Columns.Add("SYMBOL", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("SHORTNAM", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("GROUP", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("CCY", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("LONGNAME", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("NUMFORMAT", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("Date", Type.GetType("System.String"));
            dtPotentialManagersAll.Columns.Add("Value", Type.GetType("System.String"));

            //try
            //{                
            ReadFile(FilePath, ErrInfo);
            if (ErrInfo.Length > 0)
            {
                Dts.Log("Error while reading File " + FilePath, 0, null);
                Dts.Log(ErrInfo, 0, null);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            else
            {
                Dts.TaskResult = (int)ScriptResults.Success;
            }

            Dts.TaskResult = (int)ScriptResults.Success;
        }


        public void ReadFile(String FilePath, String ErrInfo)
        {
            string strConnection = string.Empty;
            //try
            //{
            string tabName = Dts.Variables["User::TabName_PotentialManagers_Quarterly"].Value.ToString();
            string selectedColumnRange = Dts.Variables["User::SelectedColumnRange_PotentialManagers_Quarterly"].Value.ToString();
            int lastIndexOf = FilePath.LastIndexOf('\\');
            string fileName = FilePath.Substring(lastIndexOf + 1);

            DateTime BatchDate = DateTime.Now;
            if (Dts.Variables["User::BatchDate_PotentialManagers"].Value.ToString().Trim().Length > 0)
            {
                BatchDate = Convert.ToDateTime(Dts.Variables["User::BatchDate_PotentialManagers"].Value.ToString().Trim());
            }

            strConnection = String.Format(@"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + FilePath + ";Extended Properties=\"Excel 12.0 Xml;HDR=NO;IMEX=1\";");

            OleDbConnection objConnection = new OleDbConnection(strConnection);
            objConnection.Open();
            DataTable colTables = objConnection.GetSchema("Tables");

            string strSQL = "Select * From [" + tabName + selectedColumnRange + "]";

            OleDbDataAdapter objAdapter = new OleDbDataAdapter(strSQL, objConnection);
            DataTable dt = new DataTable();
            objAdapter.Fill(dt);

            //Close Connection
            objConnection.Close();

            //Delete the Date header
            int dateRowHeaderIndex = 0;
            foreach (DataRow dr in dt.Rows)
            {
                dateRowHeaderIndex++;
                if (dr[0].ToString().Trim().ToUpper() == LASTHEADERCELLTEXT)
                    break;
            }
            //dt.Rows[dateRowHeaderIndex-1].Delete();
            //dt.AcceptChanges();

            //Extract the Benchmarkregion Details (First Three rows of the excel sheet)
            DataRow drSymbol = dt.Rows[0];
            DataRow drShortName = dt.Rows[1];
            DataRow drGroup = dt.Rows[2];
            DataRow drCCY = dt.Rows[3];
            DataRow drLongName = dt.Rows[4];
            DataRow drNumberFormat = dt.Rows[5];

            DataRow dRowPotentialManagers;
            for (int i = 0; i < dt.Columns.Count - 1; i++)
            {
                dRowPotentialManagers = dtPotentialManagers.NewRow();
                dRowPotentialManagers["SYMBOL"] = drSymbol[i + 1].ToString().Trim();
                dRowPotentialManagers["SHORTNAM"] = drShortName[i + 1].ToString().Trim();
                dRowPotentialManagers["GROUP"] = drGroup[i + 1].ToString().Trim();
                dRowPotentialManagers["CCY"] = drCCY[i + 1].ToString().Trim();
                dRowPotentialManagers["LONGNAME"] = drLongName[i + 1].ToString().Trim();
                dRowPotentialManagers["NUMFORMAT"] = drNumberFormat[i + 1].ToString().Trim();
                dtPotentialManagers.Rows.Add(dRowPotentialManagers);
            }


            //Now Extract the PotentialManagers Details againest SYMBOL(First Six rows of the excel sheet)
            DataRow dRow;
            string date = string.Empty;

            for (int i = 0; i < dt.Columns.Count - 1; i++)
            {
                for (int j = dateRowHeaderIndex; j < dt.Rows.Count; j++)
                {
                    if (dt.Rows[j][0].ToString().Trim().Length > 0)
                    {
                        dRow = dtPotentialManagersAll.NewRow();

                        dRow["FilePath"] = FilePath;
                        dRow["FileName"] = fileName;
                        dRow["TabName"] = tabName.Trim();// tabName.TrimEnd('$').Trim();

                        dRow["SYMBOL"] = dtPotentialManagers.Rows[i][0].ToString().Trim().Replace("'", "''");
                        dRow["SHORTNAM"] = dtPotentialManagers.Rows[i][1].ToString().Trim().Replace("'", "''");
                        dRow["GROUP"] = dtPotentialManagers.Rows[i][2].ToString().Trim().Replace("'", "''");
                        dRow["CCY"] = dtPotentialManagers.Rows[i][3].ToString().Trim().Replace("'", "''");
                        dRow["LONGNAME"] = dtPotentialManagers.Rows[i][4].ToString().Trim().Replace("'", "''");
                        dRow["NUMFORMAT"] = dtPotentialManagers.Rows[i][5].ToString().Trim().Replace("'", "''");

                        date = dt.Rows[j][0].ToString().Trim();
                        //if (!dt.Rows[j][0].ToString().Trim().Contains("/"))
                        //{
                        //    dRow["Date"] = DateTime.FromOADate(Convert.ToDouble(dt.Rows[j][0].ToString().Trim()));//Convert.ToDateTime(dt.Rows[j][0].ToString().Trim());
                        //}
                        //else if (dt.Rows[j][0].ToString().Trim().Contains("/"))
                        //{
                        //    dRow["Date"] = Convert.ToDateTime(dt.Rows[j][0].ToString().Trim());
                        //}
                        dRow["Date"] = dt.Rows[j][0].ToString().Trim();
                        dRow["Value"] = dt.Rows[j][i + 1].ToString().Trim();

                        dtPotentialManagersAll.Rows.Add(dRow);
                        totalRecordsInFile++;
                    }
                    else
                    {
                        continue;
                    }
                }
            }

            //Get The ConnectionString For Database
            string strConn = Dts.Variables["User::ConnectionMgr_Stage"].Value.ToString().Trim();
            //string strConn = Dts.Connections["SeaBIRd_Stage"].ConnectionString;
            OleDbConnection connection = new OleDbConnection(strConn);
            connection.Open();
            //Convert batchDate to "mm/dd/yyyy" format
            string batchDate = String.Format("{0:MM/dd/yyyy}", BatchDate);

            using (OleDbCommand oleComm = new OleDbCommand())
            {
                try
                {
                    oleComm.Connection = connection;
                    foreach (DataRow dr in dtPotentialManagersAll.Rows)
                    {
                        oleComm.CommandText = "INSERT INTO stg.PotentialManagers (FileName, FilePath, TabName, [SYMBOL], SHORTNAM, [GROUP], CCY, LONGNAME, NUMFORMAT, DATE, Value, Batchdate) VALUES ('" + dr["FileName"].ToString().Trim() + "','" + dr["FilePath"].ToString().Trim() + "','" + dr["TabName"].ToString().Trim() + "','" + dr["SYMBOL"].ToString().Trim() + "','" + dr["SHORTNAM"].ToString().Trim() + "','" + dr["GROUP"].ToString().Trim() + "','" + dr["CCY"].ToString().Trim() + "','" + dr["LONGNAME"].ToString().Trim() + "','" + dr["NUMFORMAT"].ToString().Trim() + "','" + dr["Date"].ToString().Trim() + "','" + dr["Value"].ToString().Trim() + "'," + "CAST('" + batchDate + "' AS Date))";
                        int i = oleComm.ExecuteNonQuery();

                        processedRecordsInFile++;
                    }

                    connection.Close();
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                }

                Dts.Variables["User::ProcessedRecordsInFile"].Value = processedRecordsInFile;
                Dts.Variables["User::TotalRecordsInFile"].Value = totalRecordsInFile;
                //Dts.Variables["User::TabName_PotentialManagers_Quarterly"].Value
            }


            //    Dts.TaskResult = (int)ScriptResults.Success;  
            //}
            //catch (Exception e)
            //{                
            //    ErrInfo = e.Message;                
            //}

        }       


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_04ee33c9be844dd3a4fd74899ff82ffc</msb:CodeName>
		<msb:DisplayName>ST_04ee33c9be844dd3a4fd74899ff82ffc</msb:DisplayName>
		<msb:ProjectId>{897B02A9-81E6-4A3D-A26F-8FD36520352B}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_04ee33c9be844dd3a4fd74899ff82ffc.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_04ee33c9be844dd3a4fd74899ff82ffc.Properties.Settings.get_Default():ST_04ee33c9be844dd3a4fd74899ff82ffc.Properties.Sett" +
    "ings")]

namespace ST_04ee33c9be844dd3a4fd74899ff82ffc.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_04ee33c9be844dd3a4fd74899ff82ffc.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_04ee33c9be844dd3a4fd74899ff82ffc.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_04ee33c9be844dd3a4fd74899ff82ffc.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_04ee33c9be844dd3a4fd74899ff82ffc.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_04ee33c9be844dd3a4fd74899ff82ffc.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_04ee33c9be844dd3a4fd74899ff82ffc.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAMv4/FYAAAAAAAAAAOAAAiELAQsAACYAAAAGAAAAAAAAvkUA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAGRFAABXAAAAAGAAAAAEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAxCUAAAAgAAAAJgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAAEAAAAYAAAAAQAAAAoAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAALAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACg
RQAAAAAAAEgAAAACAAUAuC0AAKwXAAABAAAAAAAAAAAtAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABMwBADMAgAAAgAAEXJzAABwCgIoFgAACm8XAAAKcnUAAHBvGAAACm8Z
AAAKbxoAAAoLAigWAAAKbxcAAApyowAAcG8YAAAKbxkAAApvGgAACgwHCCgbAAAKDQJ7BQAABG8c
AAAKcvEAAHBy/wAAcCgdAAAKbx4AAAomAnsFAAAEbxwAAApyGwEAcHL/AABwKB0AAApvHgAACiYC
ewUAAARvHAAACnItAQBwcv8AAHAoHQAACm8eAAAKJgJ7BQAABG8cAAAKcjkBAHBy/wAAcCgdAAAK
bx4AAAomAnsFAAAEbxwAAApyQQEAcHL/AABwKB0AAApvHgAACiYCewUAAARvHAAACnJTAQBwcv8A
AHAoHQAACm8eAAAKJgJ7BgAABG8cAAAKcmcBAHBy/wAAcCgdAAAKbx4AAAomAnsGAAAEbxwAAApy
eQEAcHL/AABwKB0AAApvHgAACiYCewYAAARvHAAACnKLAQBwcv8AAHAoHQAACm8eAAAKJgJ7BgAA
BG8cAAAKcvEAAHBy/wAAcCgdAAAKbx4AAAomAnsGAAAEbxwAAApyGwEAcHL/AABwKB0AAApvHgAA
CiYCewYAAARvHAAACnItAQBwcv8AAHAoHQAACm8eAAAKJgJ7BgAABG8cAAAKcjkBAHBy/wAAcCgd
AAAKbx4AAAomAnsGAAAEbxwAAApyQQEAcHL/AABwKB0AAApvHgAACiYCewYAAARvHAAACnJTAQBw
cv8AAHAoHQAACm8eAAAKJgJ7BgAABG8cAAAKcpsBAHBy/wAAcCgdAAAKbx4AAAomAnsGAAAEbxwA
AApypQEAcHL/AABwKB0AAApvHgAACiYCCQYoCQAABgZvHwAAChYxNAIoFgAACnKxAQBwCSgbAAAK
FhRvIAAACgIoFgAACgYWFG8gAAAKAigWAAAKF28hAAAKKwwCKBYAAAoWbyEAAAoCKBYAAAoWbyEA
AAoqGzAFAIkIAAADAAARfiIAAAoKAigWAAAKbxcAAApy5QEAcG8YAAAKbxkAAApvGgAACgsCKBYA
AApvFwAACnI5AgBwbxgAAApvGQAACm8aAAAKDAMfXG8jAAAKDQMJF1hvJAAAChMEKCUAAAoTBQIo
FgAACm8XAAAKcqUCAHBvGAAACm8ZAAAKbxoAAApvJgAACm8fAAAKFjErAigWAAAKbxcAAApypQIA
cG8YAAAKbxkAAApvGgAACm8mAAAKKCcAAAoTBXLpAgBwA3JHAwBwKCgAAAoWjQEAAAEoKQAACgoG
cyoAAAoTBhEGbysAAAoRBnKxAwBwbywAAAomcr8DAHAHCHLfAwBwKC0AAAoTBxEHEQZzLgAAChMI
cy8AAAoTCREIEQlvMAAACiYRBm8xAAAKFhMKEQlvMgAACm8zAAAKEx0rNxEdbzQAAAp0KwAAARML
EQoXWBMKEQsWbzUAAApvGgAACm8mAAAKbzYAAApyUwEAcCg3AAAKLQkRHW84AAAKLcDeFREddSwA
AAETHhEeLAcRHm85AAAK3BEJbzIAAAoWbzoAAAoTDBEJbzIAAAoXbzoAAAoTDREJbzIAAAoYbzoA
AAoTDhEJbzIAAAoZbzoAAAoTDxEJbzIAAAoabzoAAAoTEBEJbzIAAAobbzoAAAoTERYTEzjrAAAA
AnsFAAAEbzsAAAoTEhEScvEAAHARDBETF1hvNQAACm8aAAAKbyYAAApvPAAAChESchsBAHARDRET
F1hvNQAACm8aAAAKbyYAAApvPAAAChESci0BAHARDhETF1hvNQAACm8aAAAKbyYAAApvPAAAChES
cjkBAHARDxETF1hvNQAACm8aAAAKbyYAAApvPAAAChESckEBAHAREBETF1hvNQAACm8aAAAKbyYA
AApvPAAAChESclMBAHARERETF1hvNQAACm8aAAAKbyYAAApvPAAACgJ7BQAABG8yAAAKERJvPQAA
ChETF1gTExETEQlvHAAACm8+AAAKF1k/AP///34iAAAKJhYTFTiPAgAAEQoTFjhtAgAAEQlvMgAA
ChEWbzoAAAoWbzUAAApvGgAACm8mAAAKbx8AAAoWPj4CAAACewYAAARvOwAAChMUERRyZwEAcANv
PAAAChEUcnkBAHARBG88AAAKERRyiwEAcAdvJgAACm88AAAKERRy8QAAcAJ7BQAABG8yAAAKERVv
OgAAChZvNQAACm8aAAAKbyYAAApy4wMAcHLnAwBwbz8AAApvPAAAChEUchsBAHACewUAAARvMgAA
ChEVbzoAAAoXbzUAAApvGgAACm8mAAAKcuMDAHBy5wMAcG8/AAAKbzwAAAoRFHItAQBwAnsFAAAE
bzIAAAoRFW86AAAKGG81AAAKbxoAAApvJgAACnLjAwBwcucDAHBvPwAACm88AAAKERRyOQEAcAJ7
BQAABG8yAAAKERVvOgAAChlvNQAACm8aAAAKbyYAAApy4wMAcHLnAwBwbz8AAApvPAAAChEUckEB
AHACewUAAARvMgAAChEVbzoAAAoabzUAAApvGgAACm8mAAAKcuMDAHBy5wMAcG8/AAAKbzwAAAoR
FHJTAQBwAnsFAAAEbzIAAAoRFW86AAAKG281AAAKbxoAAApvJgAACnLjAwBwcucDAHBvPwAACm88
AAAKEQlvMgAAChEWbzoAAAoWbzUAAApvGgAACm8mAAAKJhEUcpsBAHARCW8yAAAKERZvOgAAChZv
NQAACm8aAAAKbyYAAApvPAAAChEUcqUBAHARCW8yAAAKERZvOgAAChEVF1hvNQAACm8aAAAKbyYA
AApvPAAACgJ7BgAABG8yAAAKERRvPQAACgIlew0AAAQXWH0NAAAEERYXWBMWERYRCW8yAAAKbz4A
AAo/gP3//xEVF1gTFREVEQlvHAAACm8+AAAKF1k/XP3//wIoFgAACm8XAAAKcu0DAHBvGAAACm8Z
AAAKbxoAAApvJgAAChMXERdzKgAAChMYERhvKwAACnIhBABwEQWMIgAAAShAAAAKExlzQQAAChMa
ERoRGG9CAAAKAnsGAAAEbzIAAApvMwAAChMfOOQBAAARH280AAAKdCsAAAETGxEaHxmNHwAAARMg
ESAWcj8EAHCiESAXERtyeQEAcG9DAAAKbxoAAApvJgAACqIRIBhycgUAcKIRIBkRG3JnAQBwb0MA
AApvGgAACm8mAAAKohEgGnJyBQBwohEgGxEbcosBAHBvQwAACm8aAAAKbyYAAAqiESAccnIFAHCi
ESAdERty8QAAcG9DAAAKbxoAAApvJgAACqIRIB5ycgUAcKIRIB8JERtyGwEAcG9DAAAKbxoAAApv
JgAACqIRIB8KcnIFAHCiESAfCxEbci0BAHBvQwAACm8aAAAKbyYAAAqiESAfDHJyBQBwohEgHw0R
G3I5AQBwb0MAAApvGgAACm8mAAAKohEgHw5ycgUAcKIRIB8PERtyQQEAcG9DAAAKbxoAAApvJgAA
CqIRIB8QcnIFAHCiESAfEREbclMBAHBvQwAACm8aAAAKbyYAAAqiESAfEnJyBQBwohEgHxMRG3Kb
AQBwb0MAAApvGgAACm8mAAAKohEgHxRycgUAcKIRIB8VERtypQEAcG9DAAAKbxoAAApvJgAACqIR
IB8WcnoFAHCiESAfFxEZohEgHxhyjAUAcKIRIChEAAAKb0UAAAoRGm9GAAAKJgIlew4AAAQXWH0O
AAAEER9vOAAACjoQ/v//3hURH3UsAAABEyERISwHESFvOQAACtwRGG8xAAAK3gwTHBEcb0cAAAom
3gACKBYAAApvFwAACnKkBQBwbxgAAAoCew4AAASMMAAAAW9IAAAKAigWAAAKbxcAAApy3gUAcG8Y
AAAKAnsNAAAEjDAAAAFvSAAACt4MERosBxEabzkAAArcKgAAAEFkAAACAAAANwEAAEQAAAB7AQAA
FQAAAAAAAAACAAAADwYAAPcBAAAGCAAAFQAAAAAAAAAAAAAA9AUAADACAAAkCAAADAAAAC8AAAEC
AAAA9AUAAIgCAAB8CAAADAAAAAAAAAADMAIAXwAAAAAAAAACcy8AAAp9BQAABAJzLwAACn0GAAAE
AnMvAAAKfQcAAAQCcy8AAAp9CAAABAJzLwAACn0JAAAEAnMvAAAKfQoAAAQCcy8AAAp9CwAABAJz
LwAACn0MAAAEAihJAAAKKgAAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJl
c291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWws
IFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1l
UmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMw
MzE5AAAAAAUAbAAAALgFAAAjfgAAJAYAANQIAAAjU3RyaW5ncwAAAAD4DgAAEAYAACNVUwAIFQAA
EAAAACNHVUlEAAAAGBUAAJQCAAAjQmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+iUzABYAAAEAAAAw
AAAABQAAABEAAAAKAAAAAwAAAEkAAAADAAAADwAAAAMAAAACAAAAAwAAAAQAAAABAAAABQAAAAEA
AAABAAAAAAAKAAEAAAAAAAYAwQC6AAoA3QDIAA4APQEUAQYAWQG6AAYAbwFeAQYAoAGLARIAOQIt
AgYALAMSAwYAVwNFAwYAbgNFAwYAiwNFAwYAqgNFAwYAwwNFAwYA3ANFAwYA9wNFAwYAEgRFAwYA
KwRFAwYAZAREBAYAhAREBAYAtQSiBAYA0gS6AAYA1wS6AAYA+wRFAwoAJwURBQoAQAURBQYAVQVE
BA4AdwUUAQ4AmQUUARYA8gXSBRYACgbSBQYALwa6ABIAPQYtAhIAZgYtAgYArwa6AAYAxQa6ABIA
8QbfBhIAFAcBBxIAMAffBhIAQQcBBxIAWgctAhIAdQctAgYAoweQBxIAyQctAgYA7ge6ABIAJAjf
BhIAQAgBBwYAagi6AAYAgAi6AAAAAAABAAAAAAABAAEAAAAQADIAPAAFAAEAAQAAARAAawA8AAkA
AwAFAAEAEAB0AH8ADQAEAAgAAwEAAKMAAAARAA8ACwARAH8BEwARAKwBFwARAPYBOQBWgBoCRwAB
AEMCXQABAFcCXQABAG4CXQABAHcCXQABAIMCXQABAIsCXQABAJECXQABAJwCXQAGAKsCYQAGAL4C
YQAGBuMCYQBWgOsCagBWgPMCagBQIAAAAACDGLwBGwABAFggAAAAAJMIwgEfAAEAkSAAAAAAkwjW
ASQAAQCYIAAAAACTCOIBKQABAKAgAAAAAJYIBgI9AAIAsyAAAAAAhhi8ARsAAgCnIAAAAACRGHAF
qQACALwgAAAAAIYA1QIbAAIAlCMAAAAAhgDaAmQAAgCQLAAAAACGGLwBGwAEAAAAAQD7AgAAAQAB
AwAAAgAKA0EAvAF4AEkAvAF4AFEAvAF4AFkAvAF4AGEAvAF4AGkAvAF4AHEAvAF4AHkAvAF4AIEA
vAF4AIkAvAF4AJEAvAF9AJkAvAEbAKEAvAEbAAkAvAEbAKkA6QSCAKkABAWJACkAvAGOAMEAvAGa
ANEAvAEbABEAvAEbANkAvAEbABkAqwWtAOEA/AWyAOkAEwa3APEAHAa9AAkAJgbBAPkANgbFADkA
UgbLAKkAXgbRAAEBcQbXAPkAdQbgAOEAgAbkAOEAhAZ9APkAkwZHAPkAmQbzAPkApQb4ABEBuAb9
APkAwAbBABkBzQYDAfkANgYKAfkA2AYRASEBvAF4ACkBIQcbACkBJgcYAfkANgYeATEBvAEmATkA
vAEbADkBTwcuASkBVAcbADkAbAc0AUkBrwc6AVEBvQe9AFkBEwZAAfkA0QfBAPkA2QdFAVEB5QdL
AWEB+gcbAEEBEwZPATkAAghWAVkBCQhcAUEBcQZiAUkBEgjgAPkAHAhpAfkA2AZvAWkBvAEbAGkB
MQh1AVkBEwZ8AfkANgaBAXEBSgh4AHEBWgjgAHkBdAjBAPEAhgiHARkAvAEbAA4AEABKAAgAQABu
AAgARABzACkAkwCgAC4AGwBMAi4AIwBMAi4AYwByAi4ACwDbAS4AEwAjAi4AMwAjAi4AKwBMAi4A
OwBSAi4AQwBMAi4AWwBpAkMAawBzAEkAkwCgAGEAmwBzAIMAqwBzAJUA7ACMAQIAAQADAAMAAABv
AS8AAADuATQAAAASAkIAAgACAAMAAgADAAUAAQAEAAUAAgAFAAcABIAAAAEAAAAuF+UPAAAAAAAA
fwAAAAQAAAAAAAAAAAAAAAEAsQAAAAAABAAAAAAAAAAAAAAAAQC6AAAAAAAMAAAAAAAAAAAAAAAK
APUAAAAAAAQAAAAAAAAAAAAAAAEALQIAAAAADAAAAAAAAAAAAAAACgCzBQAAAAAAAAAAAQAAAJAI
AAAFAAQAAAAAAAA8TW9kdWxlPgBTVF8wNGVlMzNjOWJlODQ0ZGQzYTRmZDc0ODk5ZmY4MmZmYy5k
bGwAUmVzb3VyY2VzAFNUXzA0ZWUzM2M5YmU4NDRkZDNhNGZkNzQ4OTlmZjgyZmZjLlByb3BlcnRp
ZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF8wNGVlMzNjOWJlODQ0ZGQzYTRmZDc0ODk5ZmY4MmZm
YwBTY3JpcHRSZXN1bHRzAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRp
b24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNr
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2Jq
ZWN0TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3Vy
Y2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5j
dG9yAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBk
ZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVsdABMQVNUSEVBREVSQ0VMTFRFWFQAU3lz
dGVtLkRhdGEARGF0YVRhYmxlAGR0UG90ZW50aWFsTWFuYWdlcnMAZHRQb3RlbnRpYWxNYW5hZ2Vy
c0FsbABkdFN5bWJvbABkdFNob3J0TmFtZQBkdEdyb3VwAGR0Q2N5AGR0TG9uZ05hbWUAZHROdW1i
ZXJGb3JtYXQAdG90YWxSZWNvcmRzSW5GaWxlAHByb2Nlc3NlZFJlY29yZHNJbkZpbGUATWFpbgBS
ZWFkRmlsZQB2YWx1ZV9fAFN1Y2Nlc3MARmFpbHVyZQB2YWx1ZQBGaWxlUGF0aABFcnJJbmZvAFN5
c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAFN5c3RlbS5S
ZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJp
YnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmli
dXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBB
c3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1dGUAQXNzZW1i
bHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGls
YXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBT
eXN0ZW0uRGlhZ25vc3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRp
bWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0
ZW0uQ29tcG9uZW50TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJs
ZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBTU0lTU2NyaXB0VGFza0Vu
dHJ5UG9pbnRBdHRyaWJ1dGUAU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3Fs
U2VydmVyLk1hbmFnZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJpYWJs
ZXMAZ2V0X1ZhcmlhYmxlcwBWYXJpYWJsZQBnZXRfSXRlbQBnZXRfVmFsdWUAVG9TdHJpbmcAU3Ry
aW5nAENvbmNhdABEYXRhQ29sdW1uQ29sbGVjdGlvbgBnZXRfQ29sdW1ucwBHZXRUeXBlAERhdGFD
b2x1bW4AQWRkAGdldF9MZW5ndGgATG9nAHNldF9UYXNrUmVzdWx0AEVtcHR5AExhc3RJbmRleE9m
AFN1YnN0cmluZwBEYXRlVGltZQBnZXRfTm93AFRyaW0AQ29udmVydABUb0RhdGVUaW1lAEZvcm1h
dABTeXN0ZW0uRGF0YS5PbGVEYgBPbGVEYkNvbm5lY3Rpb24AU3lzdGVtLkRhdGEuQ29tbW9uAERi
Q29ubmVjdGlvbgBPcGVuAEdldFNjaGVtYQBPbGVEYkRhdGFBZGFwdGVyAERiRGF0YUFkYXB0ZXIA
RmlsbABDbG9zZQBEYXRhUm93Q29sbGVjdGlvbgBnZXRfUm93cwBJbnRlcm5hbERhdGFDb2xsZWN0
aW9uQmFzZQBTeXN0ZW0uQ29sbGVjdGlvbnMASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgBnZXRf
Q3VycmVudABEYXRhUm93AFRvVXBwZXIAb3BfRXF1YWxpdHkATW92ZU5leHQASURpc3Bvc2FibGUA
RGlzcG9zZQBOZXdSb3cAc2V0X0l0ZW0AZ2V0X0NvdW50AFJlcGxhY2UAT2xlRGJDb21tYW5kAHNl
dF9Db25uZWN0aW9uAERiQ29tbWFuZABzZXRfQ29tbWFuZFRleHQARXhlY3V0ZU5vblF1ZXJ5AEV4
Y2VwdGlvbgBnZXRfTWVzc2FnZQBJbnQzMgBzZXRfVmFsdWUAU1RfMDRlZTMzYzliZTg0NGRkM2E0
ZmQ3NDg5OWZmODJmZmMuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAAAAcVMAVABfADAA
NABlAGUAMwAzAGMAOQBiAGUAOAA0ADQAZABkADMAYQA0AGYAZAA3ADQAOAA5ADkAZgBmADgAMgBm
AGYAYwAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAQAtVQBzAGUA
cgA6ADoAUwBvAHUAcgBjAGUARgBvAGwAZABlAHIAUABhAHQAaAAATVUAcwBlAHIAOgA6AFMAbwB1
AHIAYwBlAEYAaQBsAGUATgBhAG0AZQBfAFAAbwB0AGUAbgB0AGkAYQBsAE0AYQBuAGEAZwBlAHIA
cwAADVMAWQBNAEIATwBMAAAbUwB5AHMAdABlAG0ALgBTAHQAcgBpAG4AZwAAEVMASABPAFIAVABO
AEEATQAAC0cAUgBPAFUAUAAAB0MAQwBZAAARTABPAE4ARwBOAEEATQBFAAATTgBVAE0ARgBPAFIA
TQBBAFQAABFGAGkAbABlAFAAYQB0AGgAABFGAGkAbABlAE4AYQBtAGUAAA9UAGEAYgBOAGEAbQBl
AAAJRABhAHQAZQAAC1YAYQBsAHUAZQAAM0UAcgByAG8AcgAgAHcAaABpAGwAZQAgAHIAZQBhAGQA
aQBuAGcAIABGAGkAbABlACAAAFNVAHMAZQByADoAOgBUAGEAYgBOAGEAbQBlAF8AUABvAHQAZQBu
AHQAaQBhAGwATQBhAG4AYQBnAGUAcgBzAF8AUQB1AGEAcgB0AGUAcgBsAHkAAGtVAHMAZQByADoA
OgBTAGUAbABlAGMAdABlAGQAQwBvAGwAdQBtAG4AUgBhAG4AZwBlAF8AUABvAHQAZQBuAHQAaQBh
AGwATQBhAG4AYQBnAGUAcgBzAF8AUQB1AGEAcgB0AGUAcgBsAHkAAENVAHMAZQByADoAOgBCAGEA
dABjAGgARABhAHQAZQBfAFAAbwB0AGUAbgB0AGkAYQBsAE0AYQBuAGEAZwBlAHIAcwAAXVAAcgBv
AHYAaQBkAGUAcgA9AE0AaQBjAHIAbwBzAG8AZgB0AC4AQQBDAEUALgBPAEwARQBEAEIALgAxADIA
LgAwADsARABhAHQAYQAgAFMAbwB1AHIAYwBlAD0AAGk7AEUAeAB0AGUAbgBkAGUAZAAgAFAAcgBv
AHAAZQByAHQAaQBlAHMAPQAiAEUAeABjAGUAbAAgADEAMgAuADAAIABYAG0AbAA7AEgARABSAD0A
TgBPADsASQBNAEUAWAA9ADEAIgA7AAANVABhAGIAbABlAHMAAB9TAGUAbABlAGMAdAAgACoAIABG
AHIAbwBtACAAWwAAA10AAAMnAAEFJwAnAAEzVQBzAGUAcgA6ADoAQwBvAG4AbgBlAGMAdABpAG8A
bgBNAGcAcgBfAFMAdABhAGcAZQAAHXsAMAA6AE0ATQAvAGQAZAAvAHkAeQB5AHkAfQAAgTFJAE4A
UwBFAFIAVAAgAEkATgBUAE8AIABzAHQAZwAuAFAAbwB0AGUAbgB0AGkAYQBsAE0AYQBuAGEAZwBl
AHIAcwAgACgARgBpAGwAZQBOAGEAbQBlACwAIABGAGkAbABlAFAAYQB0AGgALAAgAFQAYQBiAE4A
YQBtAGUALAAgAFsAUwBZAE0AQgBPAEwAXQAsACAAUwBIAE8AUgBUAE4AQQBNACwAIABbAEcAUgBP
AFUAUABdACwAIABDAEMAWQAsACAATABPAE4ARwBOAEEATQBFACwAIABOAFUATQBGAE8AUgBNAEEA
VAAsACAARABBAFQARQAsACAAVgBhAGwAdQBlACwAIABCAGEAdABjAGgAZABhAHQAZQApACAAVgBB
AEwAVQBFAFMAIAAoACcAAQcnACwAJwABEScALABDAEEAUwBUACgAJwABFycAIABBAFMAIABEAGEA
dABlACkAKQABOVUAcwBlAHIAOgA6AFAAcgBvAGMAZQBzAHMAZQBkAFIAZQBjAG8AcgBkAHMASQBu
AEYAaQBsAGUAADFVAHMAZQByADoAOgBUAG8AdABhAGwAUgBlAGMAbwByAGQAcwBJAG4ARgBpAGwA
ZQAAeOKNuZrBxEmHtD8ssfVqpgAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAASFQQA
ABIZBQABARIZBAgAEhUECAASGQMGEgwEAAASDAQIABIMAgYOEk4AVQBNAEYATwBSAE0AQQBUAAMG
Eh0CBggFIAIBDg4DBhEUBAAAAAAEAQAAAAQgAQEOBCABAQgGAAESVRFZBCAAEl0GIAIBDhJdBAcB
EhUFIAEBEWUIAQACAAAAAAADAAABBCAAEnEEIAASdQUgARJ5HAMgABwDIAAOBQACDg4OBSAAEoCB
BQABElUOCCACEoCFDhJVAyAACAcgAwEOCB0FBgcEDg4ODgQgAQgDBCABDggFAAARgIkGAAERgIkO
BgADDg4ODgYAAg4OHRwFIAESHQ4HAAQODg4ODgcgAgEOEoCRBSABCBIdBSAAEoChBSAAEoCpBCAB
HAgFAAICDg4DIAACBiABEoCtCAUgABKArQUgAgEOHAYgAQESgK0FIAIODg4FAAIODhwGIAEBEoCR
BCABHA4FAAEOHQ4EIAEBHE4HIg4ODggOEYCJEoCRDhKAmRIdCBKArRKArRKArRKArRKArRKArRKA
rRKArQgSgK0ICA4SgJEOEoC1EoCtEoC9EoCpEoCxEoCpHQ4SgLFHAQAaLk5FVEZyYW1ld29yayxW
ZXJzaW9uPXY0LjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQoAQAj
U1RfMDRlZTMzYzliZTg0NGRkM2E0ZmQ3NDg5OWZmODJmZmMAAAUBAAAAABYBABFDb3B5cmlnaHQg
QCAgMjAxNgAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQAAAIxFAAAA
AAAAAAAAAK5FAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgRQAAAAAAAAAAAAAAAAAAAAAAAAAA
X0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAA
GAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAACk
AwAAAAAAAAAAAACkAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAA
AQAAAAEA5Q8uFwAAAQDlDy4XPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQBy
AEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAE
BAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA4AIAAAEAMAAwADAAMAAwADQAYgAw
AAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADAANABlAGUA
MwAzAGMAOQBiAGUAOAA0ADQAZABkADMAYQA0AGYAZAA3ADQAOAA5ADkAZgBmADgAMgBmAGYAYwAA
ADwADgABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA1ADkAMwA0AC4ANAAwADYA
OQAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AMAA0AGUAZQAzADMAYwA5
AGIAZQA4ADQANABkAGQAMwBhADQAZgBkADcANAA4ADkAOQBmAGYAOAAyAGYAZgBjAC4AZABsAGwA
AABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAg
AEAAIAAgADIAMAAxADYAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAA
UwBUAF8AMAA0AGUAZQAzADMAYwA5AGIAZQA4ADQANABkAGQAMwBhADQAZgBkADcANAA4ADkAOQBm
AGYAOAAyAGYAZgBjAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMA
VABfADAANABlAGUAMwAzAGMAOQBiAGUAOAA0ADQAZABkADMAYQA0AGYAZAA3ADQAOAA5ADkAZgBm
ADgAMgBmAGYAYwAAAEAADgABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
NQA5ADMANAAuADQAMAA2ADkAAABEAA4AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBu
AAAAMQAuADAALgA1ADkAMwA0AC4ANAAwADYAOQAAAAAAAAAAQAAADAAAAMA1AAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Update FileHistory"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{261D52EB-CCCD-49E5-8645-26B80C838020}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Update FileHistory"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{7F48876B-1298-4935-96D7-310A81F9CC2B}"
              SQLTask:SqlStatementSource="exec stg.spUpdateFileHistory ?,?,?,?,?,?, 'PotentialManagers'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@ArchivedFilePath"
                SQLTask:DtsVariableName="User::ArchiveFolderPath"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@ArchivedFileName"
                SQLTask:DtsVariableName="User::SourceFileName_PotentialManagers"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@ProcessingStatus"
                SQLTask:DtsVariableName="User::ProcessingStatus"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@SourceFilePath"
                SQLTask:DtsVariableName="User::SourceFolderPath"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@TabName"
                SQLTask:DtsVariableName="User::TabName_PotentialManagers"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@TotalRecordsInFile"
                SQLTask:DtsVariableName="User::TotalRecordsInFile"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Update FileHistory CodeIndex"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{1883eb33-a723-475d-8a18-41f32f923fae}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Update FileHistory CodeIndex"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="2">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{7F48876B-1298-4935-96D7-310A81F9CC2B}"
              SQLTask:BypassPrepare="False"
              SQLTask:SqlStatementSource="exec stg.spUpdateFileHistory ?,?,?,?,?,?, 'PotentialManagersCodeIndex'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@ArchivedFilePath"
                SQLTask:DtsVariableName="User::ArchiveFolderPath"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@ArchivedFileName"
                SQLTask:DtsVariableName="User::SourceFileName_PotentialManagers"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@ProcessingStatus"
                SQLTask:DtsVariableName="User::ProcessingStatus"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@SourceFilePath"
                SQLTask:DtsVariableName="User::SourceFolderPath"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@TabName"
                SQLTask:DtsVariableName="User::TabName_PotentialManagers_CodeIndex"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@TotalRecordsInFile"
                SQLTask:DtsVariableName="User::TotalRecordsInFile"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Update FileHistory Quarterly"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{0ADC6439-1220-4548-98A4-4F375718F2BF}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Update FileHistory Quarterly"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{7F48876B-1298-4935-96D7-310A81F9CC2B}"
              SQLTask:SqlStatementSource="exec stg.spUpdateFileHistory ?,?,?,?,?,?, 'PotentialManagers'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@ArchivedFilePath"
                SQLTask:DtsVariableName="User::ArchiveFolderPath"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@ArchivedFileName"
                SQLTask:DtsVariableName="User::SourceFileName_PotentialManagers"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@ProcessingStatus"
                SQLTask:DtsVariableName="User::ProcessingStatus"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@SourceFilePath"
                SQLTask:DtsVariableName="User::SourceFolderPath"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@TabName"
                SQLTask:DtsVariableName="User::TabName_PotentialManagers_Quarterly"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@TotalRecordsInFile"
                SQLTask:DtsVariableName="User::TotalRecordsInFile"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="20"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{F56E16E1-7677-40A9-BD31-DDE6FDA9A3AD}"
          DTS:From="Package\Foreach Loop Container\Create FileHistory"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Foreach Loop Container\Script Task" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{1E98C9EA-CFE7-4EC6-BCD8-9C424B137E85}"
          DTS:From="Package\Foreach Loop Container\Script Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Foreach Loop Container\Logging Error"
          DTS:Value="1" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 10]"
          DTS:CreationName=""
          DTS:DTSID="{D87FD218-C980-4F12-8D39-0F4BE616A7BE}"
          DTS:From="Package\Foreach Loop Container\Loading Excel Sheet Data To Table"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 10"
          DTS:To="Package\Foreach Loop Container\Logging Error Codeindex"
          DTS:Value="1" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 11]"
          DTS:CreationName=""
          DTS:DTSID="{7B2E172F-A95B-4082-A17B-32A2C74E5B4F}"
          DTS:From="Package\Foreach Loop Container\Update FileHistory CodeIndex"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 11"
          DTS:To="Package\Foreach Loop Container\Archive" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{FBDDDD10-ED4D-44CE-AECD-7082ADDBAFB3}"
          DTS:From="Package\Foreach Loop Container\Script Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Foreach Loop Container\Update FileHistory" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{3DDB3544-4300-466D-AFD9-F15CBFAD5460}"
          DTS:From="Package\Foreach Loop Container\Create FileHistory Quarterly"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Foreach Loop Container\Script Task Quarterly" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 4]"
          DTS:CreationName=""
          DTS:DTSID="{5FBC4BD8-B011-42FD-A1C1-555DB4326C61}"
          DTS:From="Package\Foreach Loop Container\Script Task Quarterly"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 4"
          DTS:To="Package\Foreach Loop Container\Logging Error Quartely"
          DTS:Value="1" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 5]"
          DTS:CreationName=""
          DTS:DTSID="{F6BBA281-16DF-4655-A697-045D8401CE05}"
          DTS:From="Package\Foreach Loop Container\Script Task Quarterly"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 5"
          DTS:To="Package\Foreach Loop Container\Update FileHistory Quarterly" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 6]"
          DTS:CreationName=""
          DTS:DTSID="{84FA0376-E8E9-432F-807F-D654A052922A}"
          DTS:From="Package\Foreach Loop Container\Update FileHistory"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 6"
          DTS:To="Package\Foreach Loop Container\Create FileHistory Quarterly" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 7]"
          DTS:CreationName=""
          DTS:DTSID="{B8EE57A0-4CEF-4FE0-B7D0-52C9B11BB603}"
          DTS:From="Package\Foreach Loop Container\Update FileHistory Quarterly"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 7"
          DTS:To="Package\Foreach Loop Container\Create FillHistory" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 8]"
          DTS:CreationName=""
          DTS:DTSID="{08912892-4656-4C85-850C-B92CDDE1A007}"
          DTS:From="Package\Foreach Loop Container\Create FillHistory"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 8"
          DTS:To="Package\Foreach Loop Container\Loading Excel Sheet Data To Table" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 9]"
          DTS:CreationName=""
          DTS:DTSID="{DD3545BF-CC49-468D-996F-B740DC8A6AED}"
          DTS:From="Package\Foreach Loop Container\Loading Excel Sheet Data To Table"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 9"
          DTS:To="Package\Foreach Loop Container\Update FileHistory CodeIndex" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{3594AB66-6840-4DB4-953F-A0236717E6EE}"
          DTS:ObjectName="{3594AB66-6840-4DB4-953F-A0236717E6EE}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::SourceFileName_PotentialManagers" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Get List of Files To Be Processed"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{41D6CB64-C1C8-4A05-8142-96351959D24C}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get List of Files To Be Processed"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::FileMask_PotentialManagers,User::InputFolderPath_PotentialManagers,User::SourceFolderPath,User::StartDate"
          ReadWriteVariables="User::SourceFileList">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a")]
[assembly: AssemblyCopyright("Copyright @  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{50AD4A05-3B7D-41E3-BB95-36EF004A82AB}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a</RootNamespace>
    <AssemblyName>ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        Dictionary<DateTime, string> dicFileList = new Dictionary<DateTime, string>();
        Dictionary<DateTime, string> dicFileListSorted = new Dictionary<DateTime, string>();

        public const string charBetweenFileNameAndFileDate = "-";
        public const string charInHiddenFileName = "~";
        public const string charInFileMask = "*";

        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            string fileName = string.Empty;
            string inputFolderPath = Dts.Variables["User::InputFolderPath_PotentialManagers"].Value.ToString();
            string sourceFolderPath = Dts.Variables["User::SourceFolderPath"].Value.ToString();
            string fileMask = Dts.Variables["User::FileMask_PotentialManagers"].Value.ToString();
            DateTime startDateTime = Convert.ToDateTime(Dts.Variables["User::StartDate"].Value.ToString().Trim());

            this.CopyFilesFromInputToSource(inputFolderPath, sourceFolderPath, fileMask);
            this.GetFileList(sourceFolderPath, fileMask, startDateTime);

        }

        public void CopyFilesFromInputToSource(string inputFolderPath, string sourceFolderPath, string fileMask)
        {
            DirectoryInfo ExcelDirectoryInfo = new DirectoryInfo(inputFolderPath);

            if (ExcelDirectoryInfo.Exists)
            {
                foreach (var file in ExcelDirectoryInfo.GetFiles(fileMask))
                {
                    File.Copy(inputFolderPath + file.Name, sourceFolderPath + file.Name, true);
                }
            }
        }

        public void GetFileList(string path, string fileMask, DateTime startDateTime)
        {
            // TODO: Add your code here            
            DateTime datetime = new DateTime(1900, 01, 01);
            int rowsAffected = 0;
            string datePart = string.Empty;
            int lastIndex = 0;
            int year = 0;
            int month = 0;
            int date = 0;
            int hour = 0;
            string filenameContains = string.Empty;
            try
            {
                DirectoryInfo ExcelDirectoryInfo = new DirectoryInfo(path);
                dicFileList.Clear();

                if (ExcelDirectoryInfo.Exists)
                {
                    foreach (var file in ExcelDirectoryInfo.GetFiles(fileMask))
                    {
                        filenameContains = fileMask.ToLower();
                        lastIndex = 0;
                        datePart = string.Empty;
                        year = 0;
                        month = 0;
                        date = 0;
                        hour = 0;
                        if (fileMask.Trim().Contains(charInFileMask) && !file.Name.Contains(charInHiddenFileName))
                        {
                            if (file.Name.Contains(charBetweenFileNameAndFileDate))
                            {
                                lastIndex = file.Name.LastIndexOf(charBetweenFileNameAndFileDate);
                                if (lastIndex > 0)
                                {
                                    datePart = file.Name.Substring(0, lastIndex).Trim();
                                    year = Convert.ToInt32(datePart.Substring(0, 4).Trim());
                                    month = Convert.ToInt32(datePart.Substring(4, 2).Trim());
                                    date = Convert.ToInt32(datePart.Substring(6, 2).Trim());

                                    if (datePart.Length > 8)
                                    {
                                        hour = Convert.ToInt32(datePart.Substring(8, 2).Trim());
                                    }

                                    datetime = new DateTime(year, month, date, hour, 0, 0);
                                }
                            }
                            //IF DateTime Value in FileName is later then the StartDate stored for 
                            //Last Suceessfully processed file only then pick the file for processing
                            if (datetime > startDateTime)
                            {
                                dicFileList.Add(datetime, file.Name.Trim());
                            }
                        }
                        else
                        {
                            dicFileList.Add(datetime, file.Name.Trim());
                        }
                    }

                    var list = dicFileList.Keys.ToList<DateTime>();
                    list.Sort();

                    Dts.Variables["User::SourceFileList"].Value = dicFileList.Values.ToList<string>();
                    Dts.TaskResult = (int)ScriptResults.Success;
                }
            }
            catch (Exception ex)
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a</msb:CodeName>
		<msb:DisplayName>ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a</msb:DisplayName>
		<msb:ProjectId>{D1BE319A-F5FD-4E7B-A711-148107C6A515}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a.Properties.Settings.get_Default():ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a.Properties.Sett" +
    "ings")]

namespace ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_e5cfc4c97f8c4a3aba708bd7ce8ad89a.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAMz0/FYAAAAAAAAAAOAAAiELAQsAABgAAAAGAAAAAAAAvjYA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAGQ2AABXAAAAAEAAAAAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAxBYAAAAgAAAAGAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAAEAAAAQAAAAAQAAAAaAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACg
NgAAAAAAAEgAAAACAAUAuCQAAKwRAAABAAAAAAAAAAAkAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABMwBACjAAAAAgAAEX4WAAAKJgIoFwAACm8YAAAKcnMAAHBvGQAACm8a
AAAKbxsAAAoKAigXAAAKbxgAAApywwAAcG8ZAAAKbxoAAApvGwAACgsCKBcAAApvGAAACnLxAABw
bxkAAApvGgAACm8bAAAKDAIoFwAACm8YAAAKcjMBAHBvGQAACm8aAAAKbxsAAApvHAAACigdAAAK
DQIGBwgoCQAABgIHCAkoCgAABioAEzADAEgAAAADAAARA3MeAAAKCgZvHwAACiw4BgVvIAAACgwW
DSsmCAmaCwMHbyEAAAooIgAACgQHbyEAAAooIgAAChcoIwAACgkXWA0JCI5pMtQqGzAGAPgBAAAE
AAAREgAgbAcAABcXKCQAAAp+FgAACgsWDBYNFhMEFhMFFhMGfhYAAAomA3MeAAAKEwcCewcAAARv
JQAAChEHbx8AAAo5oAEAABEHBG8gAAAKEwoWEws4NAEAABEKEQuaEwgEbyYAAAomFgx+FgAACgsW
DRYTBBYTBRYTBgRvHAAACnJTAQBwbycAAAo54AAAABEIbyEAAApyVwEAcG8nAAAKOsoAAAARCG8h
AAAKclsBAHBvJwAACjmRAAAAEQhvIQAACnJbAQBwbygAAAoMCBYxexEIbyEAAAoWCG8pAAAKbxwA
AAoLBxYabykAAApvHAAACigqAAAKDQcaGG8pAAAKbxwAAAooKgAAChMEBxwYbykAAApvHAAACigq
AAAKEwUHbysAAAoeMRQHHhhvKQAACm8cAAAKKCoAAAoTBgkRBBEFEQYWFnMsAAAKCgYFKC0AAAos
MgJ7BwAABAYRCG8hAAAKbxwAAApvLgAACisYAnsHAAAEBhEIbyEAAApvHAAACm8uAAAKEQsXWBML
EQsRCo5pP8H+//8CewcAAARvLwAACigBAAArEwkRCW8xAAAKAigXAAAKbxgAAApyXwEAcG8ZAAAK
AnsHAAAEbzIAAAooAgAAK28zAAAKAigXAAAKFm80AAAK3g8mAigXAAAKF280AAAK3gAqQRwAAAAA
AAAnAAAAwQEAAOgBAAAPAAAAKwAAAXYCczUAAAp9BwAABAJzNQAACn0IAAAEAig2AAAKKgAAtAAA
AM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwg
VmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2
MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQ
QURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAEwFAAAjfgAAuAUA
AAQIAAAjU3RyaW5ncwAAAAC8DQAAjAEAACNVUwBIDwAAEAAAACNHVUlEAAAAWA8AAFQCAAAjQmxv
YgAAAAAAAAACAAABVx2iCQkLAAAA+iUzABYAAAEAAAArAAAABQAAAAsAAAALAAAABwAAADYAAAAF
AAAADwAAAAQAAAACAAAAAwAAAAQAAAACAAAAAQAAAAUAAAABAAAAAQAAAAIAAAAAAAoAAQAAAAAA
BgDBALoACgDdAMgADgA9ARQBBgBZAboABgBvAV4BBgCgAYsBBgB4Al0CBgCFAroABgBNAzMDBgB4
A2YDBgCPA2YDBgCsA2YDBgDLA2YDBgDkA2YDBgD9A2YDBgAYBGYDBgAzBGYDBgBMBGYDBgCFBGUE
BgClBGUEBgDWBMMEBgDzBLoABgD4BLoABgAcBWYDCgBIBTIFCgBhBTIFBgB2BWUEDgCYBRQBBgC6
BboADgDHBRQBEgAgBgAGEgA4BgAGBgBiBroABgB/BnUGBgCNBnUGBgCnBnUGBgDJBnUGHwAmBwAA
FgBVB0kHBgBgB10CBgBnB10CHwCBBwAABgC1B7oAAAAAAAEAAAAAAAEAAQAAABAAMgA8AAUAAQAB
AAABEABrADwACQADAAUAAQAQAHQAfwANAAQACAADAQAAowAAABEACQAMABEAfwETABEArAEXABEA
9gE5AFaAGgJHAFaAOQJHAFaATgJHAAEAjgJTAAEAmgJTAAYG2AJrAFaA4AJuAFaA6AJuAFAgAAAA
AIMYvAEbAAEAWCAAAAAAkwjCAR8AAQCRIAAAAACTCNYBJAABAJggAAAAAJMI4gEpAAEAoCAAAAAA
lggGAj0AAgCzIAAAAACGGLwBGwACAKcgAAAAAJEYkQWtAAIAvCAAAAAAhgCsAhsAAgBsIQAAAACG
ALECXAACAMAhAAAAAIYAzAJjAAUA4CMAAAAAhhi8ARsACAAAAAEA8AIAAAEA9gIAAAIABgMAAAMA
FwMAAAEAIAMAAAIAFwMAAAMAJQNJALwBfABRALwBfABZALwBfABhALwBfABpALwBfABxALwBfAB5
ALwBfACBALwBfACJALwBfACRALwBfACZALwBgQChALwBGwCpALwBGwAJALwBGwCxAAoFhgCxACUF
jQApALwBkgDJALwBngDZALwBGwARALwBGwDhALwBGwDpAMEFRwAZANkFsQDxACoGtgD5AEEGuwAB
AUoGwgAJAFQGxgDpAF0GxgAJAWoGygARAbwBfAAZAZwG2AARAbAG3AAZAbkGxgDpAMIG5AApAc4G
6gBBALwB/wAMANMGGwDpANkGxgDpAOEGDgHpAOoGEwHpAPYGGAEJAQAHHgHpAAgHIwFBALwBJwFB
ABMHMQEMACIHOQEMADQHQQE5AXUHTQEUAHwHGwAMAJEHbAEBAZwHfAHxAKYHgQAMALwBGwAZALwB
GwAOABAASgAOABQATQAOABgAUAAIACgAcgAIACwAdwApAJMApAAuABsADwIuACMADwIuAGMANQIu
AAsAngEuABMA5gEuADMA5gEuACsADwIuADsAFQIuAEMADwIuAFsALAJDAGsAdwBJAJMApABhAJsA
dwCDAKsAdwCZANAA8QCBAQIAAQADAAMAAABvAS8AAADuATQAAAASAkIAAgACAAMAAgADAAUAAQAE
AAUAAgAFAAcABgFkAQSAAAABAAAALhfmDQAAAAAAAH8AAAAEAAAAAAAAAAAAAAABALEAAAAAAAQA
AAAAAAAAAAAAAAEAugAAAAAADAAAAAAAAAAAAAAACgD1AAAAAAAMAAAAAAAAAAAAAAAKAOEFAAAA
AAQAAAAAAAAAAAAAAAEAPQcAAAAAAAAAAAEAAAC/BwAABQAEAGEAXwFhAHgBAAAAAAA8TW9kdWxl
PgBTVF9lNWNmYzRjOTdmOGM0YTNhYmE3MDhiZDdjZThhZDg5YS5kbGwAUmVzb3VyY2VzAFNUX2U1
Y2ZjNGM5N2Y4YzRhM2FiYTcwOGJkN2NlOGFkODlhLlByb3BlcnRpZXMAU2V0dGluZ3MAU2NyaXB0
TWFpbgBTVF9lNWNmYzRjOTdmOGM0YTNhYmE3MDhiZDdjZThhZDg5YQBTY3JpcHRSZXN1bHRzAG1z
Y29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0
aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVudW0A
U3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2Jh
bGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9yAGdldF9SZXNvdXJjZU1h
bmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0
X0RlZmF1bHQARGVmYXVsdABjaGFyQmV0d2VlbkZpbGVOYW1lQW5kRmlsZURhdGUAY2hhckluSGlk
ZGVuRmlsZU5hbWUAY2hhckluRmlsZU1hc2sAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMARGlj
dGlvbmFyeWAyAERhdGVUaW1lAGRpY0ZpbGVMaXN0AGRpY0ZpbGVMaXN0U29ydGVkAE1haW4AQ29w
eUZpbGVzRnJvbUlucHV0VG9Tb3VyY2UAR2V0RmlsZUxpc3QAdmFsdWVfXwBTdWNjZXNzAEZhaWx1
cmUAdmFsdWUAaW5wdXRGb2xkZXJQYXRoAHNvdXJjZUZvbGRlclBhdGgAZmlsZU1hc2sAcGF0aABz
dGFydERhdGVUaW1lAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0
cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlE
ZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1i
bHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHly
aWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVB
dHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVy
U2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBTeXN0ZW0uRGlhZ25vc3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJp
YnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdl
dF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRl
AEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBT
U0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAU3RyaW5nAEVtcHR5AFNjcmlwdE9iamVj
dE1vZGVsAGdldF9EdHMATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVmFyaWFibGVzAGdldF9WYXJpYWJsZXMAVmFyaWFibGUAZ2V0
X0l0ZW0AZ2V0X1ZhbHVlAFRvU3RyaW5nAFRyaW0AQ29udmVydABUb0RhdGVUaW1lAFN5c3RlbS5J
TwBEaXJlY3RvcnlJbmZvAEZpbGVTeXN0ZW1JbmZvAGdldF9FeGlzdHMARmlsZUluZm8AR2V0Rmls
ZXMAZ2V0X05hbWUAQ29uY2F0AEZpbGUAQ29weQBDbGVhcgBUb0xvd2VyAENvbnRhaW5zAExhc3RJ
bmRleE9mAFN1YnN0cmluZwBUb0ludDMyAGdldF9MZW5ndGgAb3BfR3JlYXRlclRoYW4AQWRkAEtl
eUNvbGxlY3Rpb24AZ2V0X0tleXMAU3lzdGVtLkNvcmUAU3lzdGVtLkxpbnEARW51bWVyYWJsZQBM
aXN0YDEASUVudW1lcmFibGVgMQBUb0xpc3QAU29ydABWYWx1ZUNvbGxlY3Rpb24AZ2V0X1ZhbHVl
cwBzZXRfVmFsdWUAc2V0X1Rhc2tSZXN1bHQARXhjZXB0aW9uAFNUX2U1Y2ZjNGM5N2Y4YzRhM2Fi
YTcwOGJkN2NlOGFkODlhLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAAABxUwBUAF8A
ZQA1AGMAZgBjADQAYwA5ADcAZgA4AGMANABhADMAYQBiAGEANwAwADgAYgBkADcAYwBlADgAYQBk
ADgAOQBhAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAABPVQBzAGUA
cgA6ADoASQBuAHAAdQB0AEYAbwBsAGQAZQByAFAAYQB0AGgAXwBQAG8AdABlAG4AdABpAGEAbABN
AGEAbgBhAGcAZQByAHMAAC1VAHMAZQByADoAOgBTAG8AdQByAGMAZQBGAG8AbABkAGUAcgBQAGEA
dABoAABBVQBzAGUAcgA6ADoARgBpAGwAZQBNAGEAcwBrAF8AUABvAHQAZQBuAHQAaQBhAGwATQBh
AG4AYQBnAGUAcgBzAAAfVQBzAGUAcgA6ADoAUwB0AGEAcgB0AEQAYQB0AGUAAAMqAAADfgAAAy0A
ASlVAHMAZQByADoAOgBTAG8AdQByAGMAZQBGAGkAbABlAEwAaQBzAHQAAAAAAG+3RQkZ6phEpA5w
dGcS7f8ACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUEAAASGQUAAQESGQQIABIV
BAgAEhkDBhIMBAAAEgwECAASDAIGDgItAAJ+AAIqAAgGFRIdAhEhDgYgAwEODg4HIAMBDg4RIQIG
CAMGERQEAAAAAAQBAAAABCABAQ4EIAEBCAYAARJZEV0EIAASYQYgAgEOEmEEBwESFQUgAQERaQgB
AAIAAAAAAAMAAAEEIAASeQQgABJ9BiABEoCBHAMgABwDIAAOBQABESEOBwcEDg4OESEDIAACByAB
HRKAkQ4FAAIODg4GAAMBDg4CDQcEEoCJEoCRHRKAkQgGIAMBCAgIBxUSHQIRIQ4EIAECDgQgAQgO
BSACDggIBAABCA4DIAAICSAGAQgICAgICAcAAgIRIREhByACARMAEwELIAAVEoCZAhMAEwEREAEB
FRKAoQEeABUSgKUBHgAECgERIQcVEoChAREhCyAAFRKAqQITABMBAwoBDgQgAQEcHAcMESEOCAgI
CAgSgIkSgJEVEoChAREhHRKAkQhHAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjABAFQOFEZy
YW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQoAQAjU1RfZTVjZmM0Yzk3ZjhjNGEz
YWJhNzA4YmQ3Y2U4YWQ4OWEAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxNgAACAEACAAAAAAA
HgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAYw2AAAAAAAAAAAAAK42AAAAIAAAAAAAAAAA
AAAAAAAAAAAAAAAAAACgNgAAAAAAAAAAAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5k
bGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgA
AABYQAAApAMAAAAAAAAAAAAApAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAA
AL0E7/4AAAEAAAABAOYNLhcAAAEA5g0uFz8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAA
AQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAA
AAAAAACwBAQDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOACAAABADAAMAAwADAA
MAA0AGIAMAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwBl
ADUAYwBmAGMANABjADkANwBmADgAYwA0AGEAMwBhAGIAYQA3ADAAOABiAGQANwBjAGUAOABhAGQA
OAA5AGEAAAA8AA4AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANQA5ADMANAAu
ADMANQA1ADgAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfAGUANQBjAGYA
YwA0AGMAOQA3AGYAOABjADQAYQAzAGEAYgBhADcAMAA4AGIAZAA3AGMAZQA4AGEAZAA4ADkAYQAu
AGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkA
ZwBoAHQAIABAACAAIAAyADAAMQA2AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBh
AG0AZQAAAFMAVABfAGUANQBjAGYAYwA0AGMAOQA3AGYAOABjADQAYQAzAGEAYgBhADcAMAA4AGIA
ZAA3AGMAZQA4AGEAZAA4ADkAYQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBl
AAAAAABTAFQAXwBlADUAYwBmAGMANABjADkANwBmADgAYwA0AGEAMwBhAGIAYQA3ADAAOABiAGQA
NwBjAGUAOABhAGQAOAA5AGEAAABAAA4AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAx
AC4AMAAuADUAOQAzADQALgAzADUANQA4AAAARAAOAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIA
cwBpAG8AbgAAADEALgAwAC4ANQA5ADMANAAuADMANQA1ADgAAAAAAAAAADAAAAwAAADANgAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Get StartDate"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{E668AD99-A789-45A5-8390-8E9C87ED983D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get StartDate"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{7F48876B-1298-4935-96D7-310A81F9CC2B}"
          SQLTask:SqlStatementSource="Select Stg.fnGetStartDate('PotentialManagersStartDate') AS 'StartDate'"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="StartDate"
            SQLTask:DtsVariableName="User::StartDate" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Update StartDate"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{0F357E27-D160-4CC8-A6C1-BB9AD3DE040D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update StartDate"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{7F48876B-1298-4935-96D7-310A81F9CC2B}"
          SQLTask:SqlStatementSource="exec stg.spUpdateStartDate ?,'PotentialManagersStartDate'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="@PackageName"
            SQLTask:DtsVariableName="System::PackageName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="255" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Update TresaliaJobLog"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{B6AE0FD2-F4C7-4882-A430-FFC652902229}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update TresaliaJobLog"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{7F48876B-1298-4935-96D7-310A81F9CC2B}"
          SQLTask:SqlStatementSource="exec stg.spLogPackageExecutionHistory ?,?,'PotentialManagersJobName','U'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="@PackageID"
            SQLTask:DtsVariableName="System::PackageID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="255" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="@PackageName"
            SQLTask:DtsVariableName="System::PackageName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="255" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{10C5A9FA-48E7-4233-84C6-B0CE6FD14E94}"
      DTS:From="Package\Get List of Files To Be Processed"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Foreach Loop Container" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{189F1964-1AE1-410C-94CF-15F245714D67}"
      DTS:From="Package\Clear Staging Table"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Get List of Files To Be Processed" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{2C416225-C732-4470-90AF-F82B0EB6D11A}"
      DTS:From="Package\Create TresaliaJobLog"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Get StartDate" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{D3D35D3B-6CC2-4D36-8187-F917EF885E5D}"
      DTS:From="Package\Foreach Loop Container"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Update TresaliaJobLog" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{63E4DABA-3A33-4FDB-9113-F70FD2C87EC2}"
      DTS:From="Package\Get StartDate"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Clear Staging Table" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 5]"
      DTS:CreationName=""
      DTS:DTSID="{047C2ADF-0318-44B1-AA8F-A8FD98BCB754}"
      DTS:From="Package\Update TresaliaJobLog"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 5"
      DTS:To="Package\Update StartDate" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{88F0ECAA-4911-4827-9235-0206AABAE5DA}"
      DTS:EventID="0"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{694EE201-C3C9-4568-9195-7D9EB1999D35}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\Update TresaliaJobLog"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{D5D42A06-8BC0-428D-92B7-09FB84A8501A}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Update TresaliaJobLog"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{7F48876B-1298-4935-96D7-310A81F9CC2B}"
              SQLTask:SqlStatementSource="exec stg.spLogPackageExecutionHistory ?,?,'PotentialManagersJobName','E'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@PackageID"
                SQLTask:DtsVariableName="System::PackageID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="255" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@PackageName"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="255" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="64" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="171,42"
          Id="Package\Clear Staging Table"
          TopLeft="646.444444444445,632.515873015873" />
        <NodeLayout
          Size="183,42"
          Id="Package\Create TresaliaJobLog"
          TopLeft="640.444444444444,428.515873015873" />
        <NodeLayout
          Size="113,42"
          Id="Package\Foreach Loop Container\Archive"
          TopLeft="136.928571428572,492.642857142857" />
        <NodeLayout
          Size="162,42"
          Id="Package\Foreach Loop Container\Create FileHistory"
          TopLeft="26.5555555555555,5.5" />
        <NodeLayout
          Size="209,42"
          Id="Package\Foreach Loop Container\Create FileHistory Quarterly"
          TopLeft="20.8333333333333,134.833333333333" />
        <NodeLayout
          Size="159,42"
          Id="Package\Foreach Loop Container\Create FillHistory"
          TopLeft="47.5000000000001,305.5" />
        <NodeLayout
          Size="243,42"
          Id="Package\Foreach Loop Container\Loading Excel Sheet Data To Table"
          TopLeft="236.5,303.5" />
        <NodeLayout
          Size="143,42"
          Id="Package\Foreach Loop Container\Logging Error"
          TopLeft="432.166666666667,8.38888888888891" />
        <NodeLayout
          Size="186,42"
          Id="Package\Foreach Loop Container\Logging Error Quartely"
          TopLeft="453.444444444445,185.5" />
        <NodeLayout
          Size="131,42"
          Id="Package\Foreach Loop Container\Script Task"
          TopLeft="240.944444444444,5.2777777777776" />
        <NodeLayout
          Size="178,42"
          Id="Package\Foreach Loop Container\Script Task Quarterly"
          TopLeft="286.333333333333,132.388888888889" />
        <NodeLayout
          Size="165,42"
          Id="Package\Foreach Loop Container\Update FileHistory"
          TopLeft="230.611111111111,73.9444444444445" />
        <NodeLayout
          Size="212,42"
          Id="Package\Foreach Loop Container\Update FileHistory Quarterly"
          TopLeft="224.888888888889,222.166666666667" />
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          TopLeft="188.555555555555,26.3888888888888">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="52.388888888889,0"
              Start="0,0"
              End="44.888888888889,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="44.888888888889,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 1]"
          TopLeft="371.944444444444,27.8333333333333">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="60.2222222222222,0"
              Start="0,0"
              End="52.7222222222222,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="52.7222222222222,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="11.1197634548611,5,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 2]"
          TopLeft="309.777777777778,47.2777777777776">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,26.6666666666669"
              Start="0,0"
              End="0,19.1666666666669">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.1666666666669" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 3]"
          TopLeft="229.833333333333,154.611111111111">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="56.5000000000001,0"
              Start="0,0"
              End="49.0000000000001,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="49.0000000000001,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 4]"
          TopLeft="464.333333333333,153.388888888889">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="82.1111111111111,32.1111111111111"
              Start="0,0"
              End="82.1111111111111,24.6111111111111">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="78.1111111111111,0" />
                  <mssgle:CubicBezierSegment
                    Point1="78.1111111111111,0"
                    Point2="82.1111111111111,0"
                    Point3="82.1111111111111,4" />
                  <mssgle:LineSegment
                    End="82.1111111111111,24.6111111111111" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="66.8697634548611,-15.7490234375,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 5]"
          TopLeft="375.333333333333,174.388888888889">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-44.4444444444446,47.7777777777776"
              Start="0,0"
              End="-44.4444444444446,40.2777777777776">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.8888888888888" />
                  <mssgle:CubicBezierSegment
                    Point1="0,19.8888888888888"
                    Point2="0,23.8888888888888"
                    Point3="-4,23.8888888888888" />
                  <mssgle:LineSegment
                    End="-40.4444444444446,23.8888888888888" />
                  <mssgle:CubicBezierSegment
                    Point1="-40.4444444444446,23.8888888888888"
                    Point2="-44.4444444444446,23.8888888888888"
                    Point3="-44.4444444444446,27.8888888888888" />
                  <mssgle:LineSegment
                    End="-44.4444444444446,40.2777777777776" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 6]"
          TopLeft="230.611111111111,94.9444444444445">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-105.277777777778,39.8888888888889"
              Start="0,0"
              End="-105.277777777778,32.3888888888889">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-101.277777777778,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-101.277777777778,0"
                    Point2="-105.277777777778,0"
                    Point3="-105.277777777778,4" />
                  <mssgle:LineSegment
                    End="-105.277777777778,32.3888888888889" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 7]"
          TopLeft="330.888888888889,264.166666666667">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-203.888888888889,41.3333333333335"
              Start="0,0"
              End="-203.888888888889,33.8333333333335">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.6666666666667" />
                  <mssgle:CubicBezierSegment
                    Point1="0,16.6666666666667"
                    Point2="0,20.6666666666667"
                    Point3="-4,20.6666666666667" />
                  <mssgle:LineSegment
                    End="-199.888888888889,20.6666666666667" />
                  <mssgle:CubicBezierSegment
                    Point1="-199.888888888889,20.6666666666667"
                    Point2="-203.888888888889,20.6666666666667"
                    Point3="-203.888888888889,24.6666666666667" />
                  <mssgle:LineSegment
                    End="-203.888888888889,33.8333333333335" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 8]"
          TopLeft="206.5,325.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="29.9999999999999,0"
              Start="0,0"
              End="22.4999999999999,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="22.4999999999999,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="219,42"
          Id="Package\Foreach Loop Container\Update FileHistory CodeIndex"
          TopLeft="290.428571428571,388.571428571429" />
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 9]"
          TopLeft="358,345.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="41.9285714285714,43.0714285714287"
              Start="0,0"
              End="41.9285714285714,35.5714285714287">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.5357142857143" />
                  <mssgle:CubicBezierSegment
                    Point1="0,17.5357142857143"
                    Point2="0,21.5357142857143"
                    Point3="4,21.5357142857143" />
                  <mssgle:LineSegment
                    End="37.9285714285714,21.5357142857143" />
                  <mssgle:CubicBezierSegment
                    Point1="37.9285714285714,21.5357142857143"
                    Point2="41.9285714285714,21.5357142857143"
                    Point3="41.9285714285714,25.5357142857143" />
                  <mssgle:LineSegment
                    End="41.9285714285714,35.5714285714287" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="195,42"
          Id="Package\Foreach Loop Container\Logging Error Codeindex"
          TopLeft="549,310" />
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 10]"
          TopLeft="479.5,327.75">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="69.4999999999999,0"
              Start="0,0"
              End="61.9999999999999,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="61.9999999999999,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="15.75865234375,5,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 11]"
          TopLeft="399.928571428571,430.571428571429">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-206.5,62.0714285714284"
              Start="0,0"
              End="-206.5,54.5714285714284">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,27.0357142857142" />
                  <mssgle:CubicBezierSegment
                    Point1="0,27.0357142857142"
                    Point2="0,31.0357142857142"
                    Point3="-4,31.0357142857142" />
                  <mssgle:LineSegment
                    End="-202.5,31.0357142857142" />
                  <mssgle:CubicBezierSegment
                    Point1="-202.5,31.0357142857142"
                    Point2="-206.5,31.0357142857142"
                    Point3="-206.5,35.0357142857142" />
                  <mssgle:LineSegment
                    End="-206.5,54.5714285714284" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="1196,612"
          Size="1196,656"
          Id="Package\Foreach Loop Container"
          TopLeft="241.373015873016,856.515873015872" />
        <NodeLayout
          Size="232,42"
          Id="Package\Get List of Files To Be Processed"
          TopLeft="615.944444444445,734.515873015873" />
        <NodeLayout
          Size="143,42"
          Id="Package\Get StartDate"
          TopLeft="660.444444444444,530.515873015873" />
        <NodeLayout
          Size="160,42"
          Id="Package\Update StartDate"
          TopLeft="651.944444444445,1654.51587301587" />
        <NodeLayout
          Size="186,42"
          Id="Package\Update TresaliaJobLog"
          TopLeft="638.944444444445,1552.51587301587" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="731.944444444445,776.515873015873">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="107.428571428571,79.9999999999997"
              Start="0,0"
              End="107.428571428571,72.4999999999997">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,35.9999999999998" />
                  <mssgle:CubicBezierSegment
                    Point1="0,35.9999999999998"
                    Point2="0,39.9999999999998"
                    Point3="4,39.9999999999998" />
                  <mssgle:LineSegment
                    End="103.428571428571,39.9999999999998" />
                  <mssgle:CubicBezierSegment
                    Point1="103.428571428571,39.9999999999998"
                    Point2="107.428571428571,39.9999999999998"
                    Point3="107.428571428571,43.9999999999998" />
                  <mssgle:LineSegment
                    End="107.428571428571,72.4999999999997" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="731.944444444445,674.515873015873">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="731.944444444444,470.515873015873">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="839.373015873016,1512.51587301587">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-107.428571428571,39.9999999999968"
              Start="0,0"
              End="-107.428571428571,32.4999999999968">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.9999999999984" />
                  <mssgle:CubicBezierSegment
                    Point1="0,15.9999999999984"
                    Point2="0,19.9999999999984"
                    Point3="-4,19.9999999999984" />
                  <mssgle:LineSegment
                    End="-103.428571428571,19.9999999999984" />
                  <mssgle:CubicBezierSegment
                    Point1="-103.428571428571,19.9999999999984"
                    Point2="-107.428571428571,19.9999999999984"
                    Point3="-107.428571428571,23.9999999999984" />
                  <mssgle:LineSegment
                    End="-107.428571428571,32.4999999999968" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="731.944444444445,572.515873015873">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 5]"
          TopLeft="731.944444444445,1594.51587301587">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="Package.EventHandlers[OnError]\Update TresaliaJobLog"
          TopLeft="NaN,NaN" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <TaskHost
    design-time-name="Package\Foreach Loop Container\Loading Excel Sheet Data To Table">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="171,42"
          Id="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination"
          TopLeft="5.50000000000004,413.5" />
        <NodeLayout
          Size="130,42"
          Id="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Row Count"
          TopLeft="26,107.5" />
        <NodeLayout
          Size="139,42"
          Id="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source"
          TopLeft="21.5,5.5" />
        <NodeLayout
          Size="154,42"
          Id="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Derived Column"
          TopLeft="14,209.5" />
        <NodeLayout
          Size="156,42"
          Id="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Data Conversion"
          TopLeft="13,311.5" />
        <EdgeLayout
          Id="Package\Foreach Loop Container\Loading Excel Sheet Data To Table.Paths[Data Conversion Output]"
          TopLeft="91,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container\Loading Excel Sheet Data To Table.Paths[Row Count Output 1]"
          TopLeft="91,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container\Loading Excel Sheet Data To Table.Paths[Excel Source Output]"
          TopLeft="91,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container\Loading Excel Sheet Data To Table.Paths[Derived Column Output]"
          TopLeft="91,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\OLE DB Destination">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Foreach Loop Container\Loading Excel Sheet Data To Table\Excel Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>